.\" Manpage for Plugin_store_csv
.\" Contact ovis-help@ca.sandia.gov to correct errors or typos.
.TH man 7 "18 Sep 2015" "v2.6x" "LDMS Plugin store_csv man page"

.SH NAME
Plugin_store_csv - man page for the LDMS store_csv plugin

.SH SYNOPSIS
Within ldmsctl:
.br
ldmsctl> config name=store_csv [action=main] [ <attr> = <value> ]
.br
ldmsctl> config name=store_csv action=container [ <attr> = <value> ]
.br
ldmsctl> store name=store_csv [ <attr> = <value> ]

.SH DESCRIPTION
With LDMS (Lightweight Distributed Metric Service), plugins for the ldmsd (ldms daemon) are configured via ldmsctl.
The store_csv plugin is a CSV store.
.PP

.SH LDMSCTL MAIN CONFIGURATION ATTRIBUTE SYNTAX
The configuration parameters altheader, id_pos, rolltype, rollover, and sequence are applied to all metric sets alike,
unless overriden by the action=container values.

.TP
.BR config
name=<plugin_name> [action=main] path=<path> [ altheader=<altheader> id_pos=<idpos> rolltype=<rolltype> rollover=<rollover> sequence=<seqname> ]
.br
ldmsctl configuration line
.RS
.TP
name=<plugin_name>
.br
This MUST be store_csv.
.TP
action=main
.br
If action is not specified, name is assumed. For action=main, the remaining attributes can be specified and will be used for
all metric sets, unless overriden by the action=container values.
.TP
path=<path>
.br
The output files will be put into a directory whose root is specified by the path argument. This directory must exist; the subdirectories and files will be created. The full path to the output files will be <path>/<comp_type>/<container>. Typically these are chosen to make output files like: XXX/store_csv/node/meminfo. If you choose a rollover option, then the filename will also be postpended by "-" followed by the epochtime e.g., XXX/store_csv/node/meminfo-123456789.
.TP
altheader=<altheader>
.br
The default output writes the header to the same file as the data file. altheader=1 will write the header to an alternate file (e.g., if the data file is called "meminfo" the additional header file will be called "meminfo.HEADER"). If you choose a rollover option, the header file name will be postpended with the epochtime, similar to the data file, and a new one will be written at each rollover. Default is altheader=0.
.TP
id_pos=<idpos>
.br
The default output format in the CSV stores writes out a separate unique identifier along with each data value. In all cases, this is the component_id. We currently recommend the following: assign a unique component_id to each node and use id_pos=1 in the store configuration parameters. This will result in only one unique identifier written out in any line in the output store and that identifier will be the component id.
.HP
.br
The value of id_pos determines which metric in the set provides the component_id for the entire set. Setting id_pos=0 selects the last metric defined by the sampler as the component_id source; setting id_pos=1 selects the first metric defined by the sampler as the component_id source. All metrics in the set must have the same component_id for this to make sense, and individual metric component_id assignments may be determined by the sampler implementations.
.TP
rolltype=<rolltype>
.br
By default, the store does not rollover and the data is written to a continously open filehandle. Rolltype and rollover are used in conjunction to enable the store to manage rollover, including flushing before rollover. The header will be rewritten when a roll occurs. Valid options are:
.RS
.TP
1
.br
wake approximately every rollover seconds and roll.
.TP
2
.br
wake daily at rollover seconds after midnight (>=0) and roll.
.TP
3
.br
roll after approximately rollover records are written.
.TP
4
roll after approximately rollover bytes are written.
.RE
.TP
rollover=<rollover>
.br
Rollover value controls the frequency of rollover (e.g., number of bytes, number of records, time interval, seconds after midnight). Note that these values are estimates.
.TP
sequence=<seqname>
.br
Controls the ordering of metric data column. See STORE COLUMN ORDERING for details.
.RE

.SH LDMSCTL CONTAINER CONFIGURATION ATTRIBUTE SYNTAX
The configuration parameters set by action=main are applied to all metric sets alike,
unless overriden by the action=container values.

.TP
.BR config
name=<plugin_name> action=container [ altheader=<altheader> id_pos=<idpos> sequence=<seqname> ]
.br
ldmsctl configuration line
.RS
.TP
name=<plugin_name>
.br
This MUST be store_csv.
.TP
action=container
.br
This MUST be container.
.TP
altheader=<altheader>
.br
Overrides the default value set in action = main. Definition is as above.
.TP
id_pos=<idpos>
.br
Overrides the default value set in action = main. Definition is as above.
.TP
sequence=<seqname>
.br
Overrides the default value set in action = main. Definition is as above.
.RE

.SH LDMSCTL STORE ATTRIBUTE SYNTAX

.TP
.BR store
name=<plugin_name> set=<set_name> comp_type=<type> container=<container>
.br
ldmsctl store line
.RS
.TP
name=<plugin_name>
.br
This MUST be store_csv.
.TP
set=<set_name>
.br
The set parameter here is the base name of the sets, independent of the host name. For example, if you have configured samplers with parameter set=<hostname>/meminfo, then use the store parameter set=meminfo and all datasets for all combinations of <hostname>/meminfo will be stored.
.TP
comp_type=<type>
.br
The output files will be put into a directory whose root is specified by the path argument. This directory must exist; the subdirectories and files will be created. The full path to the output files will be <path>/<comp_type>/<container>. Typically these are chosen to make output files like: XXX/store_csv/n\
ode/meminfo.
.TP
container=<container>
.br
The output files will be put into a directory whose root is specified by the path argument. This directory must exist; the subdirectories and files will be created. The full path to the output files will be <path>/<comp_type>/<container>. Typically these are chosen to make output files like: XXX/store_csv/node/meminfo.

Use an unique container parameter for different metric sets coming from different sampler (e.g., do not use the same container for procstatutil and meminfo); however, use the same container for the same metric set coming from all hosts (e.g., for all meminfo).

If you are using multiple store Plugins, use unique container names for each even if they are going into different subdirectories. For example, if you are running both the store_csv and the store_derived_csv plugins do NOT use meminfo for both, perhaps use meminfo_der for the derived container.
.RE

.SH STORE COLUMN ORDERING

This store generates output columns in a sequence influenced by the sampler data registration. Specifically, the column ordering is
.PP
.RS
Time, Time_usec, [CompId,] <sampled metric >*
.RE
.PP
where [CompId,] is present if id_pos was specified, and
where each <sampled metric> is either
.PP
.RS
<metric_name>.CompId, <metric_name>
.RE
.PP
or if id_pos has been specified just:
.PP
.RS
<metric_name>
.RE
.PP
.PP
The default column sequence of <sampled metrics> is the reverse of the order in which the metrics are added into the metric set by the sampler.
.QP
Note that the sampler's number and order of metric additions may vary with the kind and number of hardware features enabled on a host at runtime or with the version of kernel. Because of this potential for variation, down-stream tools consuming the CSV files should always determine column names or column number of a specific metric by parsing the header line or .HEADER file. At the very least, a tool with a hardwired assumption of the column ordering should make a string comparison of the entire header line with a string containing the expected column naming and fail loudly when a mismatch is detected.
.PP
Valid sequence options are:
.RS
.TP
forward
.br
List metrics in the order added in the sampler definition. This order is intuitive to humans comparing sampler input (e.g. /proc/meminfo) with LDMS CSV output, and it facilitates validation/bug checking during sampler development.
.TP
reverse
.br
List metrics in the reverse of the order added in the sampler definition (the default for back-compatibility reasons). This order is an artifact of implementation that we discovered down-stream tools are relying upon.
.TP
alnum
.br
(reserved) Not implemented. Sort the columns by name and name-embedded numeric values.
.RE

.SH NOTES
If you want to collect on a host and store that data on the same host, run two ldmsd's: one with a collector plugin only and one as an aggegrator with a store plugin only.

.SH BUGS
No known bugs. In LDMS version 2.x, alnum is not expected to be implemented.

.SH EXAMPLES
.PP
.nf
$/tmp/opt/ovis/sbin/ldmsctl -S /var/run/ldmsd/metric_socket_vm1_1
ldmsctl> load name=store_csv
ldmsctl> config name=store_csv altheader=1 id_pos=1 sequence=forward path=/XXX/storedir
ldmsctl> config name=store_csv action=container container=loadavg_store  sequence=reverse
ldmsctl> store name=store_csv comp_type=node set=meminfo container=meminfo_store
ldmsctl> store name=store_csv comp_type=node set=loadavg container=loadavg_store
ldmsctl> quit
.fi

.SH SEE ALSO
ldms(7), Plugin_store_derived_csv(7)
