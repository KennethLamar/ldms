#!/bin/bash
#
# ldmsd		Start up the ldms sampler/collector daemon
#
# chkconfig: 2345 98 98
# description:  ldmsd is a daemon for data collection and transport
#		using plugins.
#
# processname: ldmsd
# pidfile: /var/run/ldmsd.pid

### BEGIN INIT INFO
# Provides: ldmsd
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: Start up the local ldms-aggd daemon
# Description: ldmsd is a daemon for data collection and transport using plugins
### END INIT INFO

# source function library
. /etc/init.d/functions

DAEMON=ldmsd

# Load utility functions for parsing and handling specification
# at each node based on hostname and genders.
# Must come before sysconfig/$DAEMON is loaded to support genders.
sysconfdir=/etc
if [ -f $sysconfdir/init.d/ldms-functions ]; then
	. $sysconfdir/init.d/ldms-functions
else
	echo -n $"No $sysconfdir/init.d/ldms-functions found:"
	failure
	echo
	exit
fi

VERBOSE=
ARG=$1
arg1=$1
shift
while getopts "vd" opt
do
	case "$opt" in
	v) VERBOSE="-v";;
	d) DEBUG="yes";;
	:) echo "Option -$OPTARG requires an argument" ;;
	\?) # unknown flag
		initusage
		exit 1;;
	esac
done
shift `expr $OPTIND - 1`

# read basic variables including path/lib info
if [ -f $sysconfdir/sysconfig/$DAEMON ]; then
	. $sysconfdir/sysconfig/$DAEMON
else
	echo -n $"No $sysconfdir/sysconfig/$DAEMON found:"
	failure
	echo
	exit
fi

if [ -z $DAEMON ]; then
	echo -n >&2 "$0: "DAEMON" not defined. Exiting"
	failure
	echo
	exit
fi

# check binary
[ -x $sbindir/$DAEMON ] || (echo daemon $DAEMON is missing in $PATH ; exit 5 )


RETVAL=0
prog="$DAEMON"
pidfile=$localstatedir/run/$prog.pid
lockfile=$localstatedir/lock/subsys/$prog


runlevel=$(set -- $(runlevel); eval "echo \$$#" )

start()
{
	export LD_LIBRARY_PATH=$LDMS_LIB_PATH:$LIBEVENT_LIB_PATH:$LD_LIBRARY_PATH
	export LDMS_XPRT_LIBPATH=$LDMS_PLUGIN_PATH
	export LDMSD_PLUGIN_LIBPATH=$LDMS_PLUGIN_PATH
	export RDMAV_FORK_SAFE=$LDMS_RDMAV_FORK_SAFE

	# [ -x $DAEMON ] || exit 5; done for all functions at top of script

	if [[ !(-z $LDMSD_LOCAL_SOCK_DIR) ]]; then
		test -d $LDMSD_LOCAL_SOCK_DIR || mkdir -p $LDMSD_LOCAL_SOCK_DIR
		rm -f $LDMSD_LOCAL_SOCK_DIR/*
		sleep 1
	else
		echo -n >&2 "$0: \"$LDMSD_LOCAL_SOCK_DIR\" not defined. Exiting"
		failure
		echo
		exit
	fi

	if [[ -z $COMPONENT_ID ]]; then
		echo "No COMPONENT_ID defined... Exiting"
		failure
		echo
		exit
	fi

	# Close file descriptor for standard input. If not pdsh will hang
	exec 0>&- # close stdin

	DAEMON_ARGS="-x $LDMSD_XPRT:$LDMSD_PORT -S $LDMSD_LOCAL_SOCK_DIR/$LDMSD_LOCAL_SOCK -q $LDMSD_DBG" 
	echo -n $"Starting $prog: "
	if test "x$LDMSD_LOG_PATH" = "xNONE"; then
		echoq "$DAEMON $DAEMON_ARGS > /dev/null 2>&1"
		$DAEMON $DAEMON_ARGS > /dev/null 2>&1
		RETVAL=$?
	else
		if test "x$LDMSD_LOG_PATH" = "xsyslog"; then
			LOG_ARGS="-l $LDMSD_LOG_PATH"
		else
			LOG_ARGS="-l $LDMSD_LOG_PATH/$COMPONENT_ID"
			test -d $LDMSD_LOG_PATH || echoq "Error: Logfile directory $LDMSD_LOG_PATH does not exist or is not a directory"
		fi
		echoq "$DAEMON $DAEMON_ARGS $LOG_ARGS > /dev/null 2>&1"
		$DAEMON $DAEMON_ARGS $LOG_ARGS > /dev/null 2>&1
		RETVAL=$?
	fi


	sleep 1
	if ! test -f $pidfile; then
		failure
		echo missing pidfile $pidfile
		exit 1
	fi
	if ! test -S $AGGSOCK_PATH; then
		failure
		echo missing ctl socket
		exit 1
	fi
	[ $RETVAL -eq 0 ] && touch $lockfile
	RETVAL=$?

	if [ $RETVAL -eq 0 ]; then
		sleep 2
		echoq "chmod 660 $LDMSD_LOCAL_SOCK_DIR/$LDMSD_LOCAL_SOCK"
		chmod 660 $LDMSD_LOCAL_SOCK_DIR/$LDMSD_LOCAL_SOCK
		if test $? -eq 0; then
			success
			echo
		else
			failure
			echo
			# need to cleanup and exit here.
		fi

		sleep 1
		echo -n $"Starting ldms plugins: "
		start_ldmsd_plugins
		RETVAL=$?
	fi

	if [ $RETVAL -ne 0 ]; then
		failure
		echo
	else
		 success
		 echo
	fi

}

stop()
{
	echo -n $"Stopping $prog: "
	if [ -n "`pidfileofproc $DAEMON`" ] ; then
		echoq "In stop: killproc $DAEMON"
		killproc $DAEMON
		RETVAL=$?
	else
		failure $"Stopping $prog"
		RETVAL=1
	fi
	# if we are in halt or reboot runlevel kill all running sessions
	# so the TCP connections are closed cleanly.
	# If this is a concern, we should be looking at a shutdown sequence 2 maybe, not 98.
	if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
		trap '' TERM
		killall $prog 2>/dev/null
		trap TERM
	fi
	echoq " "
	echoq "Before rm pidfile and lockfile RETVAL = $RETVAL"
	[ $RETVAL -eq 0 ] && rm -f $pidfile
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	echo
}


restart() {
	stop
	start
}

case "$arg1" in
	start)
		echoq "In start checking for daemon..."
		rh_status_q 
		RETVAL=$?
		if [ $RETVAL -eq 0 ]; then
			echoq "$DAEMON process still running... No action taken."
			exit 1
		else
			echoq "No $DAEMON process running... Call start."
			start
		fi
		;;
	stop)
		echoq "In stop checking for daemon..."
		rh_status_q
		RETVAL=$?
		if [ $RETVAL -eq 0 ]; then
			echoq "$DAEMON process still running... Calling stop."
			stop
			cleanup_ldmsctl
			cleanup_files
			exit 0
		else
			echoq "No $DAEMON process running... Call cleanup."
			cleanup_ldmsctl
			cleanup_files
			exit 1
		fi
		;;
	restart)
		restart
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
			RETVAL=2
		fi
		;;
	*)
		initusage
		RETVAL=2
	;;
esac
exit $RETVAL
