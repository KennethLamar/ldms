#
# functions for ldmsd and ldms-aggd
# These may depend on variables defined in the respective $DAEMON.conf files


#translate genders encoded ldmsctl args to ldmsctl args.
config_from_gender() {
	# reformat : -> spc; 1st / to =; & to , .
	oldIFS=$IFS
	IFS=:
	for i in $1; do
		x="$x `echo $i |sed -e 's%/%=%' -e 's%&%,%g'`"
	done
	if ! test -z $oldIFS; then
		IFS=$oldIFS
	else
		unset IFS
		# unset and the empty string for ifs are not the same
	fi
	echo $x
}

initusage()
{
	echo $"Usage: $0 {start|stop|restart|status} [flags]
        Additional flags: "
        cat << EOT >&2 
	-v  verbose
EOT
}

echoq()
{
        if [[ $VERBOSE != "-v" ]]; then
                return;
        fi
        echo $@;
}

cleanup_ldmsctl()
{
        echoq "Cleaning up any leftover ldmsctl processes owned by $USER..."
        if [ -n "`pgrep -u $USER $LDMSCTL`" ] ; then
            echoq "/usr/bin/killall -u $USER -q $LDMSCTL"
            killall -u $USER -q $LDMSCTL
            RETVAL=$?
            if [ $RETVAL -eq 1 ]; then echoq "No leftover $LDMSCTL to kill.";
            elif [ $RETVAL -eq 0 ]; then echoq "$LDMSCTL processes were killed."; fi
        fi
}

cleanup_ldmsaggctl()
{
        echoq "Cleaning up any leftover ldmsaggctl processes owned by $USER..."
        if [ -n "`pgrep -u $USER $LDMSAGGCTL`" ] ; then
            echoq "/usr/bin/killall -u $USER -q $LDMSAGGCTL"
            killall -u $USER -q $LDMSAGGCTL
            RETVAL=$?
            if [ $RETVAL -eq 1 ]; then echoq "No leftover $LDMSAGGCTL to kill.";
            elif [ $RETVAL -eq 0 ]; then echoq "$LDMSAGGCTL processes were killed."; fi
        fi
}

cleanup_files()
{
        echoq "Cleaning up PID and LOCK files..."
        [[ -n $pidfile ]] && rm -f $pidfile
        [[ -n $lockfile ]] && rm -f $lockfile
        sleep 1
        [[ -n $LDMSD_LOCAL_SOCK_DIR ]] && test -d $LDMSD_LOCAL_SOCK_DIR && rm_sock_dir $LDMSD_LOCAL_SOCK_DIR
        [[ -n $LDMSCTL_SOCK_DIR ]] && test -d $LDMSCTL_SOCK_DIR && rm_sock_dir $LDMSCTL_SOCK_DIR
}

cleanup_agg_files()
{
        echoq "Cleaning up aggregator PID and LOCK files..."
        [[ -n $pidfile ]] && rm -f $pidfile
        [[ -n $lockfile ]] && rm -f $lockfile
        sleep 1
        [[ -n $LDMSAGGD_LOCAL_SOCK_DIR ]] && test -d $LDMSAGGD_LOCAL_SOCK_DIR && rm_sock_dir $LDMSAGGD_LOCAL_SOCK_DIR
        [[ -n $LDMSAGGCTL_SOCK_DIR ]] && test -d $LDMSAGGCTL_SOCK_DIR && rm_sock_dir $LDMSAGGCTL_SOCK_DIR
}

rh_status() {
	echoq "status -p $pidfile $DAEMON"
	[[ -n $pidfile ]] && status -p $pidfile $DAEMON || return 2
	RETVAL=$?
	echoq "In rh_status: status returned $RETVAL"
	return $RETVAL
}

rh_status_q() {
        rh_status >/dev/null 2>&1
	RETVAL=$?
	echoq "rh_status returned $RETVAL"
	return $RETVAL
}

rm_sock_dir() {
	# arg 1 should be the dir to clean up and remove
	echoq cleaning $1
        if test -z "`ls -A $1`" ; then
                rm -f $1/*
        fi
        rmdir $1
}


# Start sampler plugins, using the set of samplers from genders
# on each host. This could be flattened into a new task for
# ldmsctl_args, but so far is not a performance problem.
# Also, if flattened, an error configuring one plugin may stop
# another plugin from starting, unlike now.
# 
start_ldmsd_plugins () {
	echoq "In start_ldms_plugins"
	if [[ -z $LDMSCTL ]]; then
		echoq "Failed. no LDMSCTL defined."
		return 1;
	fi
	DO_CTL="$LDMSCTL -S $LDMSD_LOCAL_SOCK_DIR/$LDMSD_LOCAL_SOCK"
	echoq $LDMSD_METRIC_SETS

	for i in $(eval echo ${LDMSD_METRIC_SETS} | tr ":;'\`" "\n"); do

		configtmp=`nodeattr $NODEATTRFILE -v $host ldmsd_${i}`
		grok="`config_from_gender $configtmp`"

		interval=`nodeattr $NODEATTRFILE -v $host ldmsd_interval_${i}`
		if test -z $interval; then
			interval=$LDMSD_INTERVAL_DEFAULT
		fi

		offset=`nodeattr $NODEATTRFILE -v $host ldmsd_offset_${i}`
		if test -z $offset; then
			offset=$LDMSD_OFFSET_DEFAULT
		fi

		eval extraconfig='$grok'
		ARGS_CONFIG="name=$i component_id=$COMPONENT_ID set=$host/$i $grok"
		ARGS_START="name=$i interval=$interval offset=$offset"
		echoq "Loading <${i}> with $ARGS_CONFIG"
		{ echo load name=$i | $DO_CTL ; } && 
		{ echo config $ARGS_CONFIG | $DO_CTL ; } &&
		{ echo start $ARGS_START | $DO_CTL ; }
	done

	return $?
}


start_add_hosts () {
	# This function generates and sends lines like the next to local aggregator.
	# add host=$nHOST type=active interval=$LDMSAGGD_INTERVAL offset=$LDMSAGGD_OFFSET xprt=$LDMSD_XPRT port=$LDMSD_PORT sets=$SETS
	# where each line is tailored to the remote host collected from.
	# This potentially requires 1000s of nodeattr calls if done in shell
	# rather than C/C++, so a C++ wrapper on libgenders  is used.
	
	DO_CTL="$LDMSAGGCTL -S $LDMSAGGD_LOCAL_SOCK_DIR/$LDMSAGGD_LOCAL_SOCK"

	# debugging ldmsctl_args to syslog looks like this; default debug is to screen.
	#ldmsctl_args -n $MYHOSTNAME -g $LDMS_GENDERS | logger -p user.debug -t ldmsctl_args

	if test "$DEBUG" = "yes"; then
		ldmsctl_args -n $MYHOSTNAME -g $LDMS_GENDERS -v 1
	fi
	# actually do it.
	ldmsctl_args -n $MYHOSTNAME -g $LDMS_GENDERS | $DO_CTL
}

# start stores, for aggregators.
start_stores () {
	if test -z $LDMSAGGCTL ; then
			echoq "No ldmsaggctl defined... Exiting"
			failure
			echo
			exit 1
	fi
	DO_CTL="$LDMSAGGCTL -S $AGGSOCK_PATH"
	if test -z $LDMSAGGD_STORES; then
		echo "No stores required."
		return;
	fi

	# Make directory to store into (store will fail if this doesn't exist)
	# then add all metric sets to all stores. Likely this needs more flexibility
	if ! test -d $STORE_PATH; then
		mkdir -p $STORE_PATH
	fi
	for i in $(eval echo $LDMSAGGD_STORES | tr ":;'\`" "\n"); do
		config=`nodeattr $NODEATTRFILE -v $host ldmsaggd_${i}`
		grok="`config_from_gender $config`"
		eval AGG_CONFIG_$i='$grok'
	
		eval extraconfig='$'"AGG_CONFIG_${i}"
		ARGS_CONFIG="name=$i path=$STORE_PATH/$i $extraconfig"
		mkdir -p $STORE_PATH/$i
		echo load name=$i | $DO_CTL
		echo config $ARGS_CONFIG | $DO_CTL
		echoq "Configuring <${i}> with $ARGS_CONFIG"
		for j in $ALL_METRIC_SETS ; do
			ARGS_STORE="name=$i comp_type=node set=$j container=$j"
			echoq "Adding <${j}> to $ARGS_STORE"
			echo store $ARGS_STORE | $DO_CTL
		done

	done
}

#export -f start_ldms_plugins start_add_hosts start_stores
export start_ldmsd_plugins start_add_hosts start_stores

