#!/bin/bash
# script to generate ldms-aggd.conf
# for a 2 level aggregation hierarchy:
# node_samplers -- agg_on_rps -- tophost_agg
# in a genders based cluster environment like TLCC

if test "x$TOPHOST" = "x"; then
	echo "TOPHOST not defined before calling $0"
	exit 1
fi

if test "x$PLAT" = "x"; then
	echo "PLAT not defined before calling $0"
	exit 1
fi

if test "x$NODESUFFIX" = "x"; then
	echo "warning NODESUFFIX not defined before calling $0"
	echo "likely to get poor performance over admin networks."
fi

if test "x$METRIC_SETS" = "x"; then
	echo "METRIC_SETS not defined before calling $0"
	echo "Should be comma separated list"
	exit 1
fi

if test "x$SKIPGW" = "x"; then
	echo "SKIPGW not defined before calling $0"
	echo "Should be 0 or 1"
	exit 1
fi

echo "$TOPHOST $PLAT $NODESUFFIX $METRIC_SETS $SKIPGW " 1>&2

hash nodeattr
x="$?"
if ! test "$x" = "0"; then
	echo "I require nodeattr but it's not found.  Aborting."
	exit 1
fi

echo "# generated by ldms-two-level-config  makeldmsconf; do not edit"

BOOTNODES=`nodeattr -c rps |sed -e 's/,/ /g'`
for BOOT in $BOOTNODES
do
	echo processing $BOOT 1>&2
	NODELIST="$( eval "nodeattr -s bootnode=$BOOT" )"
	# build lists for aggs running on boot nodes
	for i in $NODELIST
	do
	        SETS=
		if [[ $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "lsm" ]]; then
			SETHOST="$(eval echo $i | sed 's/lsm/login/g')"
		elif [[ "$SKIPGW" = "1" && $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "gw" ]]; then
			continue
		else
			SETHOST="$(eval echo $i)"
		fi
		if [[ $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "rps" ]]; then
			break
		fi	
	        for j in $(eval echo ${METRIC_SETS} | sed 's/,/ /g' )
	        do
			if [[ -z $SETS ]]; then
		                SETS=${SETHOST}/${j}
			elif [[ -z $SETHOST ]]; then
				continue
			else
		                SETS=${SETS},${SETHOST}/${j}
			fi
	        done
	        echo "$BOOT $SETS  ${i}$NODESUFFIX"
	done

	# build lists for aggs running on tophost
        SETS=
	for i in $NODELIST
	do
		if [[ $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "lsm" ]]; then
			SETHOST="$(eval echo $i | sed 's/lsm/login/g')"
		elif [[ $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "gw" ]]; then
			continue
		else
			SETHOST="$(eval echo $i)"
		fi
		if [[ $(eval echo $i | sed "s/$PLAT\-//g" | sed 's/[0-9]//g') = "rps" ]]; then
			break
		fi	
	        for j in $(eval echo ${METRIC_SETS} | sed 's/,/ /g' )
	        do
			if [[ -z $SETS ]]; then
		                SETS=${SETHOST}/${j}
			elif [[ -z $SETHOST ]]; then
				continue
			else
		                SETS=${SETS},${SETHOST}/${j}
			fi
	        done
	done
        for j in $(eval echo ${METRIC_SETS} | sed 's/,/ /g' )
        do
              SETS=${SETS},${BOOT}/${j}
        done
        echo "$TOPHOST $SETS  $BOOT"
done
echo done 1>&2
