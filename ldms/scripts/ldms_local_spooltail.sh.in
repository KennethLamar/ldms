#!/bin/bash
# test rollover spool operation for not duplicating output to closed/rolled files.
# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
BUILDDIR=@prefix@
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
declare -a port
for i in `seq 1 1 8` ; do
	port[$i]=`expr $portbase + $i`
done
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac
function mysleep() {
	echo -n sleep $1 ... 
	sleep $1
	echo done
}

# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SPOOLDIR=$TESTDIR/spool
OPENHOOK=$TESTDIR/spool/openhook.sh
SOCKDIR=$TESTDIR/run/ldmsd
LOGDIR=$TESTDIR/logs
LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
pidfile=$LDMSD_PIDFILE
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH $SPOOLDIR
echo "logs and data stored under $TESTDIR"
cat << EOF >> $OPENHOOK
#!/bin/sh
echo \$* >> $SPOOLDIR/open-list
exit 0
EOF

chmod u+x $OPENHOOK

export LD_LIBRARY_PATH=${BUILDDIR}/lib:@libdir@:@pkglibdir@:@libeventpath@:$LD_LIBRARY_PATH
export LDMS_XPRT_LIBPATH=@pkglibdir@
export PATH=${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=@pkglibdir@

# whack the daemons we own
pkill ldmsd
mysleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*

echo Starting daemons
dtop=8
#dtop=1
dlist=`seq 2 1 $dtop`
for i in $dlist; do
	ldmsd -x sock:${port[$i]} -S $SOCKDIR/metric_socket_$i  -l ${LOGDIR}/$i.txt -r $pidfile.$i -q INFO
done
ldms-aggd -x sock:${port[1]} -P 8 -Z 4 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -q DEBUG -r $LDMSD_PIDFILE.1 -A
#valgrind -v  --track-origins=yes --leak-check=yes --show-reachable=yes --trace-children=yes --log-file=vg.agg.log.%p ldms-aggd -x sock:${port[1]} -P 8 -Z 4 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -q DEBUG -r $LDMSD_PIDFILE.1 -A
#valgrind -v --tool=drd --log-file=drd.agg.log.%p ldms-aggd -x sock:${port[1]} -P 8 -Z 4 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -q DEBUG -r $LDMSD_PIDFILE.1 -A

mysleep 1

dstep=1
dlist=`seq 2 $dstep $dtop`
origin=`date +%s`
plist="meminfo vmstat procnetdev procstatutil2 synthetic"
for p in $plist; do
mkdir -p $SPOOLDIR/$p
echo $p
done
for k in $dlist; do
for p in $plist; do
echo Starting $p plugin on daemon$k
echo "load name=$p" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$k
echo "config name=$p set=localhost$k/$p component_id=$k period=20 height=10 origin=$origin maxcpu=4 ifaces=eth0,lo " | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$k
echo "start name=$p interval=1000000 offset=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$k
done
done

dlist=`seq 2 $dstep $dtop`

for k in $dlist; do
echo Adding host$k to aggregator1
	setlist=""
	for p in $plist; do
		setlist="localhost$k/$p,$setlist"
	done
echo "add host=localhost type=active xprt=sock interval=1000000 offset=500000 port=${port[$k]} sets=$setlist" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
done

mysleep 2
echo Adding store_csv to aggregator1
echo "loglevel level=DEBUG" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
mysleep 1
echo "load name=store_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
mysleep 1

echo "config name=store_csv openhook=$OPENHOOK spooler=/bin/mv spooldir=$SPOOLDIR path=${STOREDIR} altheader=0 rollover=10 rolltype=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1

echo Adding sets to aggregator1
for p in $plist; do
echo "config action=container name=store_csv spooler=/bin/mv spooldir=$SPOOLDIR/$p container=$p" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
echo "store name=store_csv comp_type=node set=$p container=$p" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
done

mysleep 60
pkill ldms-aggd
pkill ldmsd
vgp="`pgrep -f valgrind`"
echo vg is $vgp
kill -SIGTERM $vgp
sleep 1
kill -9 $vgp
echo done ${LOGDIR}/1.txt;
