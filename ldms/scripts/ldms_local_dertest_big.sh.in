#!/bin/bash

# define commafail 0 to use good input or 1 to use "bad"
# input that causes the derived store to silently ignore variables requested.
commafail=0
# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
BUILDDIR=@prefix@
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
port1=`expr $portbase + 1`
port2=`expr $portbase + 2`
port3=`expr $portbase + 3`
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac

# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SOCKDIR=$TESTDIR/run/ldmsd
LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH
echo "logs and data stored under $TESTDIR"

export LD_LIBRARY_PATH=${BUILDDIR}/lib:@libdir@:@pkglibdir@:@libeventpath@:$LD_LIBRARY_PATH
export LDMS_XPRT_LIBPATH=@pkglibdir@
export PATH=${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=@pkglibdir@
jidfile=$SOCKDIR/jid
echo 1 > $jidfile

# whack the daemons we own
pkill ldmsd
sleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old logs
rm -f ${LOGDIR}/1.txt
rm -f ${LOGDIR}/2.txt
rm -f ${LOGDIR}/3.txt

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*
derconf=${STOREDIR}/derived.conf

cat << EOF >> $derconf
# test of aries config
# sysclassib
##ib.port_xmit_data#qib0.1,1,1
##ib.port_rcv_data#qib0.1,1,1
##ib.port_xmit_packets#qib0.1,1,1
##ib.port_rcv_packets#qib0.1,1,1
##ib.port_xmit_wait#qib0.1,1,1
# proc/stat
user,1,1
sys,1,1
idle,1,1
iowait,1,1
irq,1,1
softirq,1,1
user#0,1,1
sys#0,1,1
idle#0,1,1
iowait#0,1,1
irq#0,1,1
softirq#0,1,1
user#1,1,1
sys#1,1,1
idle#1,1,1
iowait#1,1,1
irq#1,1,1
softirq#1,1,1
user#2,1,1
sys#2,1,1
idle#2,1,1
iowait#2,1,1
irq#2,1,1
softirq#2,1,1
user#3,1,1
sys#3,1,1
idle#3,1,1
iowait#3,1,1
irq#3,1,1
softirq#3,1,1
user#4,1,1
sys#4,1,1
idle#4,1,1
iowait#4,1,1
irq#4,1,1
softirq#4,1,1
user#5,1,1
sys#5,1,1
idle#5,1,1
iowait#5,1,1
irq#5,1,1
softirq#5,1,1
user#6,1,1
sys#6,1,1
idle#6,1,1
iowait#6,1,1
irq#6,1,1
softirq#6,1,1
user#7,1,1
sys#7,1,1
idle#7,1,1
iowait#7,1,1
irq#7,1,1
softirq#7,1,1
user#8,1,1
sys#8,1,1
idle#8,1,1
iowait#8,1,1
irq#8,1,1
softirq#8,1,1
user#9,1,1
sys#9,1,1
idle#9,1,1
iowait#9,1,1
irq#9,1,1
softirq#9,1,1
user#10,1,1
sys#10,1,1
idle#10,1,1
iowait#10,1,1
irq#10,1,1
softirq#10,1,1
user#11,1,1
sys#11,1,1
idle#11,1,1
iowait#11,1,1
irq#11,1,1
softirq#11,1,1
user#12,1,1
sys#12,1,1
idle#12,1,1
iowait#12,1,1
irq#12,1,1
softirq#12,1,1
user#13,1,1
sys#13,1,1
idle#13,1,1
iowait#13,1,1
irq#13,1,1
softirq#13,1,1
user#14,1,1
sys#14,1,1
idle#14,1,1
iowait#14,1,1
irq#14,1,1
softirq#14,1,1
user#15,1,1
sys#15,1,1
idle#15,1,1
iowait#15,1,1
irq#15,1,1
softirq#15,1,1
# procnfs
numcalls,1,1
retransmitts,1,1
getattr,1,1
setattr,1,1
lookup,1,1
access,1,1
readlink,1,1
read,1,1
write,1,1
readdir,1,1
# procnetdev
rx_bytes#eth0,1,1
rx_packets#eth0,1,1
tx_bytes#eth0,1,1
tx_packets#eth0,1,1
rx_bytes#eth1,1,1
rx_packets#eth1,1,1
tx_bytes#eth1,1,1
tx_packets#eth1,1,1
##rx_bytes#ib0,1,1
##rx_packets#ib0,1,1
##tx_bytes#ib0,1,1
##tx_packets#ib0,1,1
### meminfo
slurm.jobid,0,1
MemFree,0,1
Active,0,1
# lustre2_client
lstats.read_bytes#llite.fscratch,1,1
lstats.write_bytes#llite.fscratch,1,1
##lstats.open#llite.scratch1,1,1
##lstats.close#llite.scratch1,1,1
##lstats.seek#llite.scratch1,1,1
##lstats.getattr#llite.scratch1,1,1
##lstats.alloc_inode#llite.scratch1,1,1
##lstats.inode_permission#llite.scratch1,1,1
##lstats.read_bytes#llite.scratch2,1,1
##lstats.write_bytes#llite.scratch2,1,1
##lstats.open#llite.scratch2,1,1
##lstats.close#llite.scratch2,1,1
##lstats.seek#llite.scratch2,1,1
##lstats.getattr#llite.scratch2,1,1
##lstats.alloc_inode#llite.scratch2,1,1
##lstats.inode_permission#llite.scratch2,1,1
EOF


echo Starting daemons
ldmsd -x sock:$port1 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -q DEBUG
#ldmsd -x sock:$port2 -S $SOCKDIR/metric_socket_2  -l ${LOGDIR}/2.txt
ldmsd -x sock:$port3 -S $SOCKDIR/metric_socket_3  -l ${LOGDIR}/3.txt -q DEBUG
sleep 1


echo Starting plugins on daemon1
pluglist="meminfo procstatutil procdiskstats procnetdev"
pluglist="slurmjobid meminfo vmstat procstatutil2 procnfs procdiskstats procnetdev lustre2_client"
for container in $pluglist; do
	echo -n "$container ..." 
echo "load name=$container" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
echo "config name=$container set=localhost1/$container component_id=1 llite=fscratch,gscratch with_jobid=1 file=$jidfile ifaces=ib0" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
echo "start name=$container interval=1000000 offset=0" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
	echo done
done
sleep 2

SETS=""
for container in $pluglist; do
	SETS="$SETS,localhost1/$container"
done

echo Adding host1 to aggregator3
#echo "add host=localhost type=active xprt=sock interval=1000000 offset=200000 port=$port1 sets=localhost1/meminfo,localhost1/vmstat,localhost1/procstatutil2,localhost1/procnetdev,localhost1/procnfs,localhost1/procdiskstats" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
echo "add host=localhost type=active xprt=sock interval=1000000 offset=200000 port=$port1 sets=$SETS" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3

sleep 5
echo Adding store_derived_csv to aggregator3
echo "load name=store_derived_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
echo "load name=store_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
sleep 2
echo "config name=store_derived_csv path=${STOREDIR} id_pos=1 altheader=1 derivedconf=${derconf}" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
echo "config name=store_csv path=${STOREDIR} id_pos=1 altheader=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
for container in $pluglist; do
	echo -n "store $container ..." 
	echo "store name=store_derived_csv comp_type=node set=$container container=$container" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
	echo "store name=store_csv comp_type=node set=$container container=$container.csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
	echo done
done
sleep 2

#

sleep 5
echo ldms_ls on host 1:
ldms_ls -h localhost -x sock -p $port1 -l
sleep 1



echo ldms_ls on host 3:
ldms_ls -h localhost -x sock -p $port3 

echo done;
echo "logs and data stored under $TESTDIR"
