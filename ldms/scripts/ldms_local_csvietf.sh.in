#!/bin/bash

# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
BUILDDIR=@prefix@
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
port1=`expr $portbase + 1`
port2=`expr $portbase + 2`
port3=`expr $portbase + 3`
port4=`expr $portbase + 4`
port5=`expr $portbase + 5`
port6=`expr $portbase + 6`
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac
function mysleep() {
	echo -n sleep $1 ... 
	sleep $1
	echo done
}

# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SOCKDIR=$TESTDIR/run/ldmsd
LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
#export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
#export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH
echo "logs and data stored under $TESTDIR"

export LD_LIBRARY_PATH=${BUILDDIR}/lib:@libdir@:@pkglibdir@:@libeventpath@:$LD_LIBRARY_PATH
export LDMS_XPRT_LIBPATH=@pkglibdir@
export PATH=${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=@pkglibdir@

# whack the daemons we own
pkill ldmsd
mysleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old logs
rm -f ${LOGDIR}/1.txt
rm -f ${LOGDIR}/2.txt
rm -f ${LOGDIR}/3.txt
rm -f ${LOGDIR}/4.txt
rm -f ${LOGDIR}/5.txt
rm -f ${LOGDIR}/6.txt

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*

derconf=${STOREDIR}/derived.conf
if test "x$commafail" = "x1"; then
cat << EOF >> $derconf
# test subset of current chama/aries config
MemFree , 0,1
Active , 0,1
EOF
else
cat << EOF >> $derconf
# test subset of current chama/aries config
MemFree,0,1
Active,0,1
EOF
fi

echo Starting daemons
ldmsd -x sock:$port1 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -q DEBUG
ldmsd -x sock:$port2 -S $SOCKDIR/metric_socket_2  -l ${LOGDIR}/2.txt -q DEBUG
ldmsd -x sock:$port3 -S $SOCKDIR/metric_socket_3  -l ${LOGDIR}/3.txt -q DEBUG
ldmsd -x sock:$port4 -S $SOCKDIR/metric_socket_4  -l ${LOGDIR}/4.txt -q DEBUG
ldmsd -x sock:$port5 -S $SOCKDIR/metric_socket_5  -l ${LOGDIR}/5.txt -q DEBUG
ldmsd -x sock:$port6 -S $SOCKDIR/metric_socket_6  -l ${LOGDIR}/6.txt -q DEBUG
mysleep 1


echo Starting plugins on daemon1
echo "load name=meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
echo "config name=meminfo set=localhost1/meminfo component_id=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1
echo "start name=meminfo interval=1000000" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_1

echo Starting plugins on daemon2
echo "load name=meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_2
echo "config name=meminfo set=localhost2/meminfo component_id=2" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_2
echo "start name=meminfo interval=1000000" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_2
echo Starting plugins on daemon3
echo "load name=meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
echo "config name=meminfo set=localhost3/meminfo component_id=3" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
echo "start name=meminfo interval=1000000" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
mysleep 2

echo Adding host1 to aggregator4
echo "add host=localhost type=active xprt=sock interval=1000000 port=$port1 sets=localhost1/meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_4
echo Adding host2 to aggregator5
echo "add host=localhost type=active xprt=sock interval=1000000 port=$port2 sets=localhost2/meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_5
echo Adding host3 to aggregator6
echo "add host=localhost type=active xprt=sock interval=1000000 port=$port3 sets=localhost3/meminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_6

mysleep 2
echo Adding store_csv to aggregator4
echo "load name=store_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_4
echo Adding store_csv to aggregator5
echo "load name=store_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_5
echo Adding store_derived_csv to aggregator6
echo "load name=store_derived_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_6
mysleep 2
echo "config name=store_csv path=${STOREDIR} altheader=1 id_pos=1 sequence=forward ietfcsv=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_4
echo "config name=store_csv path=${STOREDIR} altheader=1 id_pos=1 sequence=reverse ietfcsv=0" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_5
echo "config name=store_derived_csv path=${STOREDIR} derivedconf=${derconf} altheader=1 id_pos=1 ietfcsv=true" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_6
echo "store name=store_csv comp_type=node set=meminfo container=rmeminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_5
echo "store name=store_csv comp_type=node set=meminfo container=fmeminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_4
echo "store name=store_derived_csv comp_type=node set=meminfo container=dmeminfo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_6
mysleep 2
#


mysleep 30
pkill ldmsd
echo done;
echo "logs and data stored under $TESTDIR"
