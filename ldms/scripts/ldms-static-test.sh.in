#!/bin/bash
#
# This tests ldmsd run with static config files (as would normally
# happen as a system service) and shut down with a signal.
#
bypass=0
if test -z "$allowroot"; then
	allowroot=0
fi
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export BUILDDIR=@prefix@
export pkglibdir=@pkglibdir@
export PACKAGE_TARNAME=@PACKAGE_TARNAME@
export docdir=@docdir@
export exdir=@docdir@-@PACKAGE_VERSION@

input=$1
export input
if test -z "$1"; then
	echo "FAIL: no input file to $0"
	exit 1
fi
if test "$1" = "-l"; then
	echo "Canned tests are:"
	echo "$exdir/examples/static-test/"
	(cd $exdir/examples/static-test; cat .canned)
	exit 0
fi
if test $(basename $1) = $1 -a ! -f $1; then
	if test -f $exdir/examples/static-test/$1; then
		input=$exdir/examples/static-test/$1
	fi
fi
if ! test -f $input -a -r $input; then
	echo FAIL: cannot read test input $1
	exit 1
fi
export testname=`basename $1`
# get_prolog_name insertfile basefile
# find prolog file in . or adjacent to basefile
# or in standard directory
function get_prolog_name () {
	local rfile
	if test "$#" = "0"; then
		return ""
	fi
	pfile=$1
	basefile=$2
	rfile=$pfile
	# check unqualified path names not existing in pwd
	if test $(basename $pfile) = $pfile -a ! -f $pfile; then
		# in standard place?
		if test -f $exdir/examples/static-test/$pfile; then
			rfile=$exdir/examples/static-test/$pfile
		fi
		if test -n "$2"; then
			basedir=$(dirname $basefile)
			if test -f $basedir/$pfile; then
				rfile=$basedir/$pfile
			fi
		fi
	fi
	if ! test -f $rfile -a -r $rfile; then
		echo "FAIL: cannot find test prolog $pfile in . $exdir/examples/static-test or next to $basefile."
		rfile=""
		exit 1
	fi
	echo $rfile
}

TESTDIR=$2

if test -z "$2"; then
	TESTDIR=`pwd`/ldmstest/$testname
fi
export TESTDIR

if test -z "$XPRT"; then
	export XPRT=sock
fi
declare -a ports

# turn on valgrind usage in ldmsd and ldms_ls.
# VG and VGARGS may be specified to override the default
# valgrind in path and the default valgrind options.
# by default -v --log-file=something are provided.
#
function vgon {
  usevg=1
}

# turn off valgrind usage
function vgoff {
  usevg=0
}

# LDMSD number-list launch a daemon for each number
# expecting to find $input.$i configuration files.
# ${i} will be exported to the environment of ldmsd.
function LDMSD {
	if test "$bypass" = "1"; then
		return 0
	fi
	prologs=""
	bug=0
	local OPTIND
	while getopts ":p:" opt; do
		case $opt in
		p)
			f="$OPTARG"
			prologs="$prologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: -f expected filename"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			bug=1
			;;
		esac
	done
	shift "$((OPTIND - 1))"
	if test "$bug" != "0"; then
		return
	fi

	for i in $*; do
		/bin/rm -f ${LOGDIR}/$i.txt ${LOGDIR}/vg.$i
		ports[$i]=$(($portbase + $i))
		eval export port$i=${ports[$i]}
		binname=ldmsd.${ports[$i]}
		pkill -9 $binname
		/bin/rm -f $LDMSD_RUN/$binname
		if test -f $pkglibdir/ldmsd; then
			ln -s $pkglibdir/ldmsd $LDMSD_RUN/$binname
		else
			ln -s ${BUILDDIR}/sbin/ldmsd $LDMSD_RUN/$binname
		fi
	done
	for i in $*; do
		export i
		if test -f $input.$i -a -r $input.$i; then
			if test "$usevg" = "1"; then
				if test -z "$VG"; then
					XVG=valgrind
				else
					XVG=$VG
				fi
				if test -z "$VGARGS"; then
					XVGARGS="-v --log-file=${LOGDIR}/vg.$i"
				else
					XVGARGS="-v --log-file=${LOGDIR}/vg.$i $VGARGS"
				fi
				wrap="$XVG $XVGARGS"
			else
				wrap=""
			fi
			echo starting daemon $i
			echo "# generated from $input" > $LDMSD_RUN/conf.$i
			for pf in $prologs; do
				pfn=`get_prolog_name $pf $input`
				echo "# prolog from $pfn" >> $LDMSD_RUN/conf.$i
				cat $pfn >> $LDMSD_RUN/conf.$i
			done
			echo "# generated from $input.$i" >> $LDMSD_RUN/conf.$i
			cat $input.$i >> $LDMSD_RUN/conf.$i
			$wrap ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]} \
				-c $LDMSD_RUN/conf.$i \
				-l ${LOGDIR}/$i.txt \
				-v DEBUG \
				-r $LDMSD_PIDFILE.$i
		else
			echo starting idle daemon $i
			ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]} \
				-l ${LOGDIR}/$i.txt \
				-v DEBUG \
				-r $LDMSD_PIDFILE.$i
		fi
		SLEEP 2
		if ! test -f $LDMSD_PIDFILE.$i; then
			echo FAIL: failed to start $i. check ${LOGDIR}/$i.txt
			bypass=1
			break;
		fi
	done
}

# MESSAGE print arguments to output
function MESSAGE  {
	if test "$bypass" = "1"; then
		return 0
	fi
	echo $*
}

#
function LDMS_LS {
	if test "$bypass" = "1"; then
		return 0
	fi
	nodes=$1
	shift
	for i in $nodes; do
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				VG=valgrind
			fi
			if test -z "$VGARGS"; then
				VGARGS="-v --log-file=${LOGDIR}/vgls.$i.%p"
			fi
			wrap="$VG $VGARGS"
		else
			wrap=""
		fi
		if ! test -f "$LDMSD_PIDFILE.$i"; then
			echo FAIL: ls of missing daemon $i skipped. check ${LOGDIR}/$i.txt
			bypass=1
			break;
		fi
		$wrap ldms_ls  -h localhost -x sock -p ${ports[$i]} $*
	done
}
# KILL_LDMSD num list
function KILL_LDMSD {
	for i in $*; do
		if test -f $LDMSD_PIDFILE.$i; then
			kill -SIGTERM `cat $LDMSD_PIDFILE.$i`
		else
			echo cannot find pidfile for $i
		fi
	done
}

function file_created {
	if test "$bypass" = "1"; then
		return 0
	fi
	if ! test -f $1; then
		echo FAIL: file $1 not created.
		bypass=1
		return 1
	fi
	if ! test -r $1; then
		echo FAIL: file $1 not readable.
		bypass=1
		return 1
	fi
	return 0
}
# pause some seconds
function SLEEP() {
	if test "$bypass" = "1"; then
		return 0
	fi
	echo -n sleep $1 ...
	sleep $1
	echo done
}

# generate a jobinfo file
jobid=1002003004005006000
uid=0
appid=2000000000000006000
function job_vals () {
cat << EOF > $1
JOBID=$jobid
UID=$uid
USER=fakeuser
APPID=$appid
EOF
((jobid++))
((uid+=1000))
((appid+=10))
}

function JOBDATA () {
if test "$#" = "1"; then
	job_vals $1
	return
fi
f=$1
shift
for i in $*; do
	job_vals $f.$i
done
}



portbase=61100
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
if test "$allowroot" = "0"; then
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "try 'allowroot=1 $0 $*' to force run."
	exit 1
	;;
esac
fi

# use our pid in dirname to prevent collisions in dir & file naming
export STOREDIR=$TESTDIR/store
export SOCKDIR=$TESTDIR/run/ldmsd
export LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
SECRET=$SOCKDIR/secret
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_RUN=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_RUN
echo "secretword="`openssl rand -hex 16` > $SECRET
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
echo "logs and data stored under $TESTDIR"

export LD_LIBRARY_PATH=${BUILDDIR}/lib:@libdir@:@pkglibdir@:@libeventpath@:$LD_LIBRARY_PATH
export ZAP_LIBPATH=@pkglibdir@
export PATH=$LDMSD_RUN:${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=@pkglibdir@

echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."
echo "logs and data stored under $TESTDIR"

echo removing old output
rm -rf ${STOREDIR}/*

. $input

SLEEP 1
echo "logs and data stored under $TESTDIR"
echo done;
