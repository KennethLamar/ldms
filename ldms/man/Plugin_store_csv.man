.\" Manpage for Plugin_store_csv
.\" Contact ovis-help@ca.sandia.gov to correct errors or typos.
.TH man 7 "26 Nov 2018" "v4" "LDMS Plugin store_csv man page"

.SH NAME
Plugin_store_csv - man page for the LDMS store_csv plugin

.SH SYNOPSIS
.SY load
name=\fIINST\fR plugin=store_csv
.SY config
name=\fIINST\fR path=\fIFILE_PATH\fR [rollover=\fIINT\fR]
[rolltype=\fI(1|2|3|4|5)\fR] [altheader=\fI(0|!0)\fR \fIuserdata=(0|!0)\fR]
[create_uid=\fIUID\fR] [create_gid=\fIGID\fR] [create_perm=\fIMODE\fR]
[buffer=\fI(0|1|N)\fR buffertype=\fI(3|4)\fR]
[notify=\fIPATH\fR [notify_isfifo=\fIbool\fR]] [rename_template=\fIMETAPATH\fR
[rename_uid=\fIUID\fR [rename_gid=\fIGID\fR] rename_perm=\fIMODE\fR]]
[opt_file=\fIFILENAME\fR]
.SY strgp_add
name=\fIPOLICY\fR container=\fIINST\fR schema=\fISCH\fR
.SY strgp_start
name=\fIPOLICY\fR


.SH DESCRIPTION
With LDMS (Lightweight Distributed Metric Service), store plugins for the ldmsd (ldms daemon) are configured via
the ldmsd_controller or a configuration file. The store_csv plugin is a CSV store.

In LDMSD v5, a store plugin instance coreesponds to exactly one store container
of exactly one schema. This eliminates the requirement of shared store location
of a single-instance store plugin in LDMSD v4. A store plugin can have multiple
store instances in LDMSD v5. A shared store location can still be achieved via
variables (see \fBEXAMPLES\fR).

.PP

.SH STORE_CSV CONFIGURATION SOURCES
Default configuration options can be defined on the config line or in the store_csv line of the options file.
Options for the specific instance matching 'container=c schema=s" can be given in the file
indicated by opt_file=filename when configuring the defaults (see section OPTIONS FILE below) or can be scripted.

The configuration parameters rolltype, rollover, and rollagain are applied to all metric sets alike
from the values given on the command line or in the "store_csv" line of the options file. All other options can be specified per instance.

The config defaults (a config line without container or schema defined) can be specified once in scripting or the opt_file. They are used for any container/schema pair not explicitly configured.

The config values for a specific container/schema pair can be specified once
in scripting or in the opt_file. Any attribute not specifically defined will
take on the value configured in the default config line or opt_file.

.SH STORE_CSV CONFIGURATION ATTRIBUTE SYNTAX
.SY config
name=\fIINST\fR path=\fIFILE_PATH\fR [rollover=\fIINT\fR]
[rolltype=\fI(1|2|3|4|5)\fR] [altheader=\fI(0|!0)\fR userdata=\fI(0|!0)\fR]
[create_uid=\fIUID\fR] [create_gid=\fIGID\fR] [create_perm=\fIMODE\fR]
[buffer=\fI(0|1|N)\fR buffertype=\fI(3|4)\fR]
[notify=\fIPATH\fR [notify_isfifo=\fIbool\fR]] [rename_template=\fIMETAPATH\fR
[rename_uid=\fIUID\fR [rename_gid=\fIGID\fR] rename_perm=\fIMODE\fR]]
[opt_file=\fIFILENAME\fR] [ietfcsv=\fI(0|1)\fR] [typeheader=\fIFMT\fR]

.TP
Config option descriptions:
.RS
.TP
\fBname\fR=\fIINST\fR
.br
The instance name to configure (specified when \fBload\fR).

.TP
\fBopt_file\fR=\fIFILENAME\fR
.br
The options for the plugin and specific instances will be read from the named
file. See OPTIONS FILE.

.TP
\fBtypeheader\fR=\fIFMT\fR
.br
Controls the presence and format of a .KIND file. The kind CSV file gives type
information on each metric (or metric array).  For example, if the metric file
is named meminfo, the kind file is named meminfo.KIND and if the metric file is
named meminfo.15111111, the kind file is named meminfo.KIND.15111111. The
typeformat parameter is 0 (no kind file), 1 (ldms kinds with arrays flattend out
into scalars), 2 (LDMS kinds with arrays).  The typeformat supporting arrays
uses the notation <typename>[]<len> for extraction of lengths by scripting
tools. The default typeformat is 0.

.TP
\fBietfcsv\fR=\fI(0|1)\fR
.br
Turns on (1) or off (0) use of IETF 4180 quoting for header column names.

.TP
\fBpath\fR=\fIPATH\fR
.br
The path of the CSV output file (e.g. /data/csv/meminfo). If you choose a
rollover option, then the filename will also be appended by "." followed by the
epoch time e.g., /data/csv/meminfo-123456789.

.TP
\fBaltheader\fR=\fI(0|!0)\fR
.br
Distinguishes whether or not to write the header to a separate file than the
data file. 0 = same file. Any non-zero is a separate file. Default is the same
file.

If a separate file is used then, if the data file is called "meminfo" the
additional header file will be called "meminfo.HEADER". If you choose a
rollover option, the header file name will be appended with the epochtime,
similar to the data file, and a new one will be written at each rollover.

Default is altheader=0.

.TP
\fBuserdata\fR=\fI(0|!0)\fR
.br
Distinguishes whether or not to write each metrics' user data along with each
data value. 0 = no write. Any non-zero means to write the values. Default is to
not write.

.TP
\fBrolltype\fR=\fI(1|2|3|4|5)\fR
.br
By default, the store does not rollover and the data is written to a continously
open filehandle. Rolltype and rollover are used in conjunction to enable the
store to manage rollover, including flushing before rollover. The header will be
rewritten when a roll occurs. Valid options are:

.RS
.SY 1
wake approximately every rollover seconds and roll.
.SY 2
wake daily at rollover seconds after midnight (>=0) and roll.
.SY 3
roll after approximately rollover records are written.
.SY 4
roll after approximately rollover bytes are written.
.SY 5
wake at rollover seconds after midnight (>=0) and roll, then repeat every
rollagain (> rollover) seconds during the day. For example "rollagain=3600
rollover=0 rolltype=5" rolls files hourly.
.RE

.TP
\fBrollover\fR=\fINUM\fR
.br
Rollover value controls the frequency of rollover (e.g., number of bytes, number
of records, time interval, seconds after midnight). Note that these values are
estimates.

.TP
\fBbuffer\fR=\fI(0|1|N)\fR
.br
Distinguishes whether or not to buffer the data for the writeout. 0 = does not
buffer. 1 enables buffering with the system determining the flush. N will flush
after approximately N kB of data (> 4) or N lines -- buffertype determines which
of these it is. Default is system controlled buffering (1).

.TP
\fBbuffertype\fR=\fI(3|4)\fR
.br
If buffer=N then buffertype determines if the buffer parameter refers to the
number of lines (3) or the kB of writeout (4). The values are the same as in
rolltype, so only 3 and 4 are applicable.

.TP
\fBnotify\fR=\fINOTIFY_PATH\fR
.br
The path for the file event notices. If unspecified, no notices are sent. See
NOTICES below for details of event notices.

.TP
\fBnotify_isfifo\fR=\fI(true|false)\fR
.br
Default false. If set true, \fINOTIFY_PATH\fR will be handled in a nonblocking
manner as a FIFO.

.TP
\fBcreate_perm\fR=\fIMODE\fR
.br
Only octal (e.g.0744) specifications are allowed. If unspecified or 0 is given,
then no change is made. The default permission is 0600 for data files. The mode
specified can include execute bits which will apply to intermediate directories
created but not data files. For example 0755 will yield 0755 for new directories
and 0644 for data files.

.TP
\fBcreate_uid\fR=\fINUM\fR
.br
Specify a new user id for data files. If unspecified, no change in user
ownership is made. Changes in ownership of the files do not affect intermediate
directories.

.TP
\fBcreate_gid\fR=\fINUM\fR
.br
Specify a new group id for data files. If unspecified, no change in group
ownership is made.

.TP
\fBrename_template\fR=\fIMETAPATH\fR
.br
This option relocates closed CSV files, typically to a subdirectory, for
processing by other tools that watch directories. The \fIMETAPATH\fR template
is applied to define a new name after file closure. The rename is limited to
locations on the same mount point, per the C \fBrename\fR(2) call. Substitutions
(%) in the provided template are performed as described in \fBMETAPATH
SUBSTITUTIONS\fR below. Errors in template specification will cause the rename
to be skipped. As part of the renaming process, the mode and ownership of the
file may also be adjusted by specifying \fBrename_perm\fR, \fBrename_uid\fR,
and \fBrename_gid\fR. Missing intermediate directories will be created if
possible. To enable greater flexibility than the renaming just described (e.g.
crossing file systems), the notify option must be used to call another program.

.TP
\fBrename_perm\fR=\fIMODE\fR
.br
Only octal (e.g.0744) specifications are allowed. If unspecified or 0 is given,
then no change is made. The permissions are changed before the rename and even
if the rename fails. This option is applied only if \fBrename_template\fR is
applied.

.TP
\fBrename_uid\fR=\fINUM\fR
.br
Specify a new user id for the file. If unspecified, no change in user ownership
is made. Changes in ownership of the files do not affect intermediate
directories that might be created following the template. This option is applied
only if \fBrename_template\fR is applied.

.TP
\fBrename_gid\fR=\fINUM\fR
.br
Specify a new group id for the file. If unspecified, no change in group
ownership is made. This option is applied only if \fBrename_template\fR is
applied.

.RE

.SH STRGP_ADD ATTRIBUTE SYNTAX
The strgp_add sets the policies being added. This line determines the output
files via identification of the container and schema.

.SY strgp_add
name=\fIPOLICY_NAME\fR container=\fIINST\fR schema=\fISCHEMA\fR

.TP
Option descriptions:

.RS

.TP
\fBname\fR=\fIPOLICY_NAME\fR
.br
The policy name for this strgp.

.TP
\fBcontainer\fR=\fIINST\fR
.br
Referring to the store instance name (\fIINST\fR from \fBload\fR command) to be
used by this policy.

.TP
\fBschema\fR=\fISCHEMA\fR
.br
The schema name of the LDMS sets to route through this policy.

.RE

.SH STORE COLUMN ORDERING

This store generates output columns in a sequence influenced by the sampler data registration. Specifically, the column ordering is
.PP
.RS
Time, Time_usec, ProducerName, <sampled metric >*
.RE
.PP
where each <sampled metric> is either
.PP
.RS
<metric_name>.userdata, <metric_name>.value
.RE
.PP
or if userdata has been opted not to include, just:
.PP
.RS
<metric_name>
.RE
.PP
.PP
The column sequence of <sampled metrics> is the order in which the metrics are added into the metric set by the sampler (or the order they are specifed by the user).
.QP
Note that the sampler's number and order of metric additions may vary with the kind and number of hardware features enabled on a host at runtime or with the version of kernel. Because of this potential for variation, down-stream tools consuming the CSV files should always determine column names or column number of a specific metric by parsing the header line or .HEADER file.
.PP

.SH NOTICES OF STORE FILE EVENTS
.PP
When the notify option is specified one-line notices of file events (open, close) are written to the named output. Post-processing tools can watch the notification file.  When combined with a roll-over configuration, this provides notices of files rolled over. The notify option should not be combined with the rename_template option, as the rename happens after notification.
.PP
If the named output is a plain file, it will be written to indefinitely. Typical use is to tail the file into a file-handling script and to periodically rotate  or truncate it as a log file. The file is buffered, so notices may be received some time after the event recorded.
.PP
If the named output is a FIFO, it is handled in a non-blocking fashion. When no FIFO reader is processing, event messages are queued (up to 1000 messages for up to 6000 seconds). Messages older than the time limit are removed. When the queue size is exceeded, the oldest messages are removed. Typical use of the FIFO is to cat it into a file-handling script.
.PP
The event line format is:
.RS
EVENT SOURCE CONTAINER SCHEMA TYPE FILENAME
.RE
where the fields are
.RS
.TP
EVENT
.br
One of OPENED, CLOSED.
.TP
SOURCE
.br
The name of the plugin.
.TP
CONTAINER
.br
The name of the container.
.TP
SCHEMA
.br
The name of the schema.
.TP
TYPE
.br
The type of information in the file. Current values are "data" and "header".
Anticipated values from other plugins in development include: "summary" (for
statistical data about files closed), and
"kind", "cname", "pyname", and "units" (for auxiliary columnar data about metrics).
.TP
FILENAME
.br
The name of the file.

.RE

.SH METAPATH SUBSTITUTION

The following % escape sequence replacements are performed on the rename_template value for file renamings:
.PP
.TP
%P
.br
plugin name
.TP
%C
.br
container name
.TP
%S
.br
schema name
.TP
%T
.br
file event notification type
.TP
%B
.br
basename(closed-file-name)
.TP
%D
.br
dirname(closed-file-name)
.TP
%{ENV_VAR_NAME}
.br
getenv(ENV_VAR_NAME). The use of undefined or empty environment vars yields an empty substitution, not an error.
Characters in the environment variable are restricted to: 'A-Za-z0-9%@()+-_./:='; other characters present will prevent the rename.
.TP
%s
.br
timestamp suffix, if it exists.
.PP

.SH NOTES
.PP
.IP \[bu]
Please note the argument changes from v2 and v3.
.IP \[bu]
The 'sequence' option has been removed. The 'action' option has been replaced; see "OPTIONS FILE" above.
.PP
.IP \[bu]
In the opt_file passed by name to store_csv, including the line prefix "config name=store_csv" is redundant and is disallowed. The opt_file syntax is plugin specific and is not an ldmsd configuration script.
Scripts written in the store_csv opt_file syntax cannot be used directly with the ldmsd include statement.

.SH BUGS
None known.

.SH IMPERFECT FEATURES
The rename and create options do not accept symbolic permissions, uid, or gid. There is no metapath substitution for file creation.

.SH EXAMPLES
.PP
Within ldmsd_controller or in a ldmsd command script file

.nf
load name=loadavg_csv plugin=store_csv
config name=loadavg_csv altheader=1 rolltype=2 rollover=0 \\
       path=/mprojects/ovis/ClusterData/${LDMSCLUSTER}/loadavg.csv \\
       create_gid=1000000039 create_perm=640 \\
       rename_template=%D/archive-spool/%{HOSTNAME}/%B \\
       rename_perm=444
strgp_add name=loadavg_policy container=loadavg_csv schema=loadavg
.fi


Updating from v4:

\fBload\fR command has the following changes
.RS
.IP name
becomes the name of the loaded plugin instance, which can be anything unique to
identify the plugin instance.
.IP plugin
refers to the name of the plugin to be loaded.
.RE

\fBconfig\fR command has the following changes:
.RS
.IP path
directly points to the CSV file, instead of the
common data directory. Sinve LDMSD v5 supports multiple plugin instances of the
same plugin (while v4 did not), an instance of the store_csv directly manages
single CSV file for a schema (while v4 manages multiple CSV files for multiple
schemas).
.IP opt_file
has been deprecated as the plugin instance handles only single CSV file (single
container).
.RE

\fBstrgp\fR command has the following changes:
.RS
.IP container
refers to the plugin instance to be used as a container for the policy.
.IP plugin
option has been deprecated.
.RE

Updating from v3:

If in version 3 "config name=store_csv action=custom container=cstore schema=meminfo" was used for a specific csv instance, then put the additional options for that store instance in the store_csv options file on a line:

container=cstore schema=meminfo <op=val >*

or use them interactively or in a script as:

config name=store_csv container=cstore schema=meminfo <op=val >*

after the store_csv defaults have been set.

.SH SEE ALSO
ldmsd(8), ldms_quickstart(7), ldmsd_controller(8)
