#!/usr/bin/env python

import re

LSTATS = set([
    "status",

    "req_waittime",
    "req_qdepth",
    "req_active",
    "req_timeout",
    "reqbuf_avail",

    "ldlm_glimpse_enqueue",
    "ldlm_plain_enqueue",
    "ldlm_extent_enqueue",
    "ldlm_flock_enqueue",
    "ldlm_ibits_enqueue",
    "mds_reint_setattr",
    "mds_reint_create",
    "mds_reint_link",
    "mds_reint_unlink",
    "mds_reint_rename",
    "mds_reint_open",
    "mds_reint_setxattr",
    "read_bytes",
    "write_bytes",

    "ost_reply",
    "ost_getattr",
    "ost_setattr",
    "ost_read",
    "ost_write",
    "ost_create",
    "ost_destroy",
    "ost_get_info",
    "ost_connect",
    "ost_disconnect",
    "ost_punch",
    "ost_open",
    "ost_close",
    "ost_statfs",
    "ost_sync",
    "ost_set_info",
    "ost_quotacheck",
    "ost_quotactl",
    "ost_quota_adjust_qunit",

    "mds_getattr",
    "mds_getattr_lock",
    "mds_close",
    "mds_reint",
    "mds_readpage",
    "mds_connect",
    "mds_disconnect",
    "mds_getstatus",
    "mds_statfs",
    "mds_pin",
    "mds_unpin",
    "mds_sync",
    "mds_done_writing",
    "mds_set_info",
    "mds_quotacheck",
    "mds_quotactl",
    "mds_getxattr",
    "mds_setxattr",
    "mds_writepage",
    "mds_is_subdir",
    "mds_get_info",
    "mds_hsm_state_get",
    "mds_hsm_state_set",
    "mds_hsm_action",
    "mds_hsm_progress",
    "mds_hsm_request",
    "mds_hsm_ct_register",
    "mds_hsm_ct_unregister",
    "mds_swap_layouts",

    "ldlm_enqueue",
    "ldlm_convert",
    "ldlm_cancel",
    "ldlm_bl_callback",
    "ldlm_cp_callback",
    "ldlm_gl_callback",
    "ldlm_set_info",

    "mgs_connect",
    "mgs_disconnect",
    "mgs_exception",
    "mgs_target_reg",
    "mgs_target_del",
    "mgs_set_info",
    "mgs_config_read",

    "obd_ping",
    "llog_origin_handle_cancel",
    "obd_quota_callback",
    "dt_index_read",

    "llog_origin_handle_create",
    "llog_origin_handle_next_block",
    "llog_origin_handle_read_header",
    "llog_origin_handle_write_rec",
    "llog_origin_handle_close",
    "llog_origin_connect",
    "llog_catinfo",
    "llog_origin_handle_prev_block",
    "llog_origin_handle_destroy",

    "quota_acquire",
    "quota_release",

    "seq_query",
    "sec_ctx_init",
    "sec_ctx_init_cont",
    "sec_ctx_fini",

    "fld_query",
    "update_obj",
])

MD_STATS = set([
    "open",
    "close",
    "mknod",
    "link",
    "unlink",
    "mkdir",
    "rmdir",
    "rename",
    "getattr",
    "setattr",
    "getxattr",
    "setxattr",
    "statfs",
    "sync",
    "samedir_rename",
    "crossdir_rename",
    "status"
])

OBD_STATS = set([
	"status",

	"iocontrol",
	"get_info",
	"set_info_async",
	"attach",
	"detach",
	"setup",
	"precleanup",
	"cleanup",
	"process_config",
	"postrecov",
	"add_conn",
	"del_conn",
	"connect",
	"reconnect",
	"disconnect",
	"fid_init",
	"fid_fini",
	"statfs",
	"statfs_async",
	"packmd",
	"unpackmd",
	"checkmd",
	"preallocate",
	"precreate",
	"create",
	"create_async",
	"destroy",
	"setattr",
	"setattr_async",
	"getattr",
	"getattr_async",
	"brw",
	"brw_async",
	"prep_async_page",
	"get_lock",
	"queue_async_io",
	"queue_group_io",
	"trigger_group_io",
	"set_async_flags",
	"teardown_async_page",
	"merge_lvb",
	"update_lvb",
	"adjust_kms",
	"punch",
	"sync",
	"migrate",
	"copy",
	"iterate",
	"preprw",
	"commitrw",
	"enqueue",
	"match",
	"change_cbdata",
	"find_cbdata",
	"cancel",
	"cancel_unused",
	"join_lru",
	"init_export",
	"destroy_export",
	"extent_calc",
	"llog_init",
	"llog_connect",
	"llog_finish",
	"pin",
	"unpin",
	"import_event",
	"notify",
	"health_check",
	"quotacheck",
	"quotactl",
	"quota_adjust_qunit",
	"ping",
	"register_page_removal_cb",
	"unregister_page_removal_cb",
	"register_lock_cancel_cb",
	"unregister_lock_cancel_cb",
	"pool_new",
	"pool_rem",
	"pool_add",
	"pool_del",
	"getref",
	"putref",

	"read_bytes",
	"write_bytes",
])

LLITE_STATS = set([
    "status",

    "dirty_pages_hits",
    "dirty_pages_misses",
    "read_bytes",
    "write_bytes",
    "brw_read",
    "brw_write",
    "osc_read",
    "osc_write",
    "ioctl",
    "open",
    "close",
    "mmap",
    "seek",
    "fsync",
    "readdir",

    "setattr",
    "truncate",
    "flock",
    "getattr",

    "create",
    "link",
    "unlink",
    "symlink",
    "mkdir",
    "rmdir",
    "mknod",
    "rename",

    "statfs",
    "alloc_inode",
    "setxattr",
    "getxattr",
    "listxattr",
    "removexattr",
    "inode_permission",

    "read_bytes.rate",
    "write_bytes.rate",
])

TKN = re.compile(r'\S+')

def lstats_parse(path, fltr = None):
    """Parse Lustre stats file, returning a dict of {metric:value}"""
    ret = {}
    f = open(path)
    f.readline() # discard 1st line (snapshot_time)
    for l in f:
        tkns = TKN.findall(l)
        ext = 8 - len(tkns)
        tkns.extend( [None] * ext )
        (name, count, _samples, unit, _min, _max, _sum, _sum2) = tkns
        if fltr and name not in fltr:
            continue
        assert( _samples == "samples" )
        # use _sum if available, otherwise, use count
        val = _sum if _sum != None else count
        val = long(val)
        ret[name] = val
    return ret
