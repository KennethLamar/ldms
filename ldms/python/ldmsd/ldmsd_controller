#!/usr/bin/env python

#######################################################################
# -*- c-basic-offset: 8 -*-
# Copyright (c) 2015-2016 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2015-2016 Sandia Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of Sandia nor the names of any contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#      Neither the name of Open Grid Computing nor the names of any
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#######################################################################

from __future__ import print_function
import struct
import cmd
import argparse
import sys
import os
import traceback
import json

from ldmsd import ldmsd_config, ldmsd_util, ldmsd_request
from ldmsd.ldmsd_request import LDMSD_Request
from ldmsd.ldmsd_request import LDMSD_Req_Attr
LDMSD_REQ_SOM_F=1
LDMSD_REQ_EOM_F=2
LDMSD_REQ_ALL_F=(LDMSD_REQ_SOM_F|LDMSD_REQ_EOM_F)
LDMSD_CLI_REQ=1
LDMSD_PRDCR_STATUS_REQ=0x104
LDMSD_PRDCR_SET_REQ=0x107
LDMSD_STRGP_STATUS_REQ=0x204
LDMSD_UPDTR_STATUS_REQ=0x304
LDMSD_PLUGN_STATUS_REQ=0x504

class LdmsdCmdParser(cmd.Cmd):
    def __init__(self, sockname = None, host = None, port = None, xprt = None,
                                    secretPath = None, infile=None, inband = True):
        self.msg_no = 1
        if (sockname is None) and (host is None or port is None):
            raise ValueError("Expecting either sockname or host & port. None is given")

        try:
            self.secretword = None
            if secretPath is not None:
                try:
                    from ovis_lib import ovis_auth
                except ImportError:
                    raise ImportError("No module named ovis_lib. Please "
                                    "make sure that ovis is built with "
                                    "--enable-swig")
                self.secretword = ovis_auth.ovis_auth_get_secretword(secretPath, None)
        except:
            raise

        if sockname is not None:
            self.ctrl = ldmsd_config.ldmsdOutbandConfig(sockname = sockname,
                                                    secretword = self.secretword)
            self.prompt = "{0}> ".format(os.path.basename(sockname))
        elif inband is True:
            self.ctrl = ldmsd_config.ldmsdInbandConfig(host = host,
                                                       port = port,
                                                       xprt = xprt,
                                                       secretword = self.secretword)
            self.prompt = "{0}:{1}:{2}>".format(xprt, host, port)
        else:
            self.ctrl = ldmsd_config.ldmsdOutbandConfig(host = host,
                                                         port = int(port),
                                                         secretword = self.secretword)
            self.prompt = "{0}:{1}> ".format(host, port)

        if infile:
            cmd.Cmd.__init__(self, stdin=infile)
        else:
            cmd.Cmd.__init__(self)

    def __complete_attr_list(self, verb, text):
        req_opt_attr = self.ctrl.get_cmd_attr_list(verb)
        attr_list = []
        if req_opt_attr['req'] is not None:
            attr_list = req_opt_attr['req']
        if req_opt_attr['opt'] is not None:
            attr_list += req_opt_attr['opt']
        return ["{0}=".format(attr) for attr in attr_list if attr.startswith(text)]

    def emptyline(self):
        pass

    def __check_command_syntax(self, attr_value):
        tokens = attr_value.split(" ")
        for tk in tokens:
            if tk.endswith("="):
                return False
        return True

    def do_shell(self, args):
        """
        Execute a shell command
        """
        os.system(args)

    def do_comment(self, args):
        """
        skip comments
        """
        pass

    def do_say(self, args):
        """
        Print a message to the console
        """
        print(args)

    def precmd(self, line):
        if line[0:1] == '#':
            return ''
        return line

    def handle(self, verb, args):
        if args and not self.__check_command_syntax(args):
            print("Syntax error, there are attributes for which no value is given.")

        attr_list = []
        if args:
            attr_s = []
            attr_str_list = args.split(' ')

            for attr_str in attr_str_list:
                name = None
                value = None
                try:
                    [name, value] = attr_str.split("=")
                except ValueError:
                    # keyword
                    [name] = attr_str.split("=")
                except:
                    raise
                if (verb == "config" and name != "name") or (verb == "env"):
                    attr_s.append(attr_str)
                else:
                    try:
                        attr = LDMSD_Req_Attr(value = value, attr_name = name)
                    except KeyError:
                        attr_s.append(attr_str)
                    except Exception:
                        raise
                    else:
                        attr_list.append(attr)

            if len(attr_s) > 0:
                attr_str = " ".join(attr_s)
                attr = LDMSD_Req_Attr(value = attr_str, attr_id = LDMSD_Req_Attr.STRING)
                attr_list.append(attr)

        attr_list.append(LDMSD_Req_Attr(attr_id = LDMSD_Req_Attr.LAST))
        try:
            request = LDMSD_Request(command = verb, attrs = attr_list)
        except KeyError:
            print("'{0}' is not supported.".format(verb))
            return None
        except:
            raise

        request.send(self.ctrl)
        if is_debug:
            print("Sent request {0}".format(request.message_number_get()))

        resp = request.receive(self.ctrl)
        if is_debug:
            print("Received the response of request {0}".format(request.message_number_get()))
            print(resp)
        if 'errcode' in resp.keys() and resp['errcode'] != 0:
                print(resp['msg'])
        return resp

    def read_none_tty(self, fin):
        for cmd in fin:
            self.onecmd(cmd)

    def do_source(self, arg):
        """
        Parse commands from the specified file as if they were entered
        on the console.
        """
        script = open(arg, 'r')
        self.read_none_tty(script)
        for cmd in script:
            self.onecmd(cmd)
        script.close()

    def do_script(self, arg):
        exit_code, out, err = ldmsd_util.sh_exec(arg)
        if exit_code != 0:
            print("Script exited with code {0} and error: {1}".format(exit_code, err))
            return
        cfg = out.split("\n")
        for cmd in cfg:
            self.onecmd(cmd)

    def do_try(self, arg):
        print(self.__complete_attr_list(arg, ""))

    def do_usage(self, arg):
        """List the usage of the plugins loaded on the server.
        """
        resp = self.handle('usage', arg)
        if resp['errcode'] == 0:
            print(resp['msg'])

    def complete_usage(self, text, line, begidx, endidx):
        return self.__complete_attr_list('usage', text)

    def do_load(self, arg):
        """
        Load a plugin at the Aggregator/Producer
        Parameters:
        name=     The plugin name
        """
        self.handle('load', arg)

    def complete_load(self, text, line, begidx, endidx):
        return self.__complete_attr_list('load', text)

    def do_daemon_exit(self, arg):
        """
        Exit the connected LDMS daemon
        """
        self.handle('daemon_exit', arg)
        self.do_quit(arg)
        print("Please 'quit' the ldmsd_controller interface")

    def complete_daemon_exit(self, text, line, begidx, endidx):
        return self.__complete_attr_list('daemon_exit', text)

    def do_prdcr_add(self, arg):
        """
        Add an LDMS Producer to the Aggregator
        Parameters:
        name=     A unique name for this Producer
        xprt=     The transport name [sock, rdma, ugni]
        host=     The hostname of the host
        port=     The port number on which the LDMS is listening
        type=     The connection type [active, passive]
        interval= The connection retry interval (us)
        """
        self.handle('prdcr_add', arg)

    def complete_prdcr_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_add', text)

    def do_prdcr_del(self, arg):
        """
        Delete an LDMS Producer from the Aggregator. The producer
        cannot be in use or running.
        Parameters:
        name=    The Producer name
        """
        self.handle('prdcr_del', arg)

    def complete_prdcr_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_del', text)

    def do_prdcr_start(self, arg):
        """
        Start the specified producer.
        Parameters:
        name=     The name of the producer
        [interval=] The connection retry interval in micro-seconds. If this is not
                  specified, the previously configured value will be used.
        """
        self.handle('prdcr_start', arg);

    def complete_prdcr_start(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_start', text)

    def do_prdcr_start_regex(self, arg):
        """
        Start all producers matching a regular expression.
        Parameters:
        regex=     A regular expression
        [interval=]  The connection retry interval in micro-seconds. If this is not
                   specified, the previously configured value will be used.
        """
        self.handle('prdcr_start_regex', arg);

    def complete_prdcr_start_regex(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_start_regex', text)

    def do_prdcr_stop(self, arg):
        """
        Stop the specified Producer.
        Parameters:
        name=  The producer name
        """
        self.handle('prdcr_stop', arg);

    def complete_prdcr_stop(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_stop', text)

    def do_prdcr_stop_regex(self, arg):
        """
        Stop all producers matching a regular expression.
        Parameters:
        regex=   The regular expression
        """
        self.handle('prdcr_stop_regex', arg);

    def complete_prdcr_stop_regex(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_stop_regex', text)

    def do_updtr_add(self, arg):
        """
        Add an Updater that will periodically update Producer metric sets either
        by pulling the content or by registering for an update push. The default
        is to pull set contents.
        Parameters:
        name=       The update policy name
        [interval=] The update/collect interval. This is required only when the
                    push argument is not given.
        [offset=]   Offset for synchronized aggregation
        [push=]     Push mode: 'onchange' and 'onpush'. 'onchange' means the
                    Updater will get an update whenever the set source ends a
                    transaction or pushes the update. 'onpush' means the Updater
                    will receive an update only when the set source pushes the
                    update.
        """
        self.handle('updtr_add', arg)

    def complete_updtr_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_add', text)

    def do_updtr_del(self, arg):
        """
        Remove an updater from the configuration
        Parameter:
        name=     The update policy name
        """
        self.handle('updtr_del', arg)

    def complete_updtr_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_del', text)

    def do_updtr_match_add(self, arg):
        """
        Add a match condition that specifies the sets to update.
        Parameters::
        name=   The update policy name
        regex=  The regular expression string
        match=  The value with which to compare; if match=inst,
                the expression will match the set's instance name, if
                match=schema, the expression will match the set's
                schema name.
        """
        self.handle('updtr_match_add', arg)

    def complete_updtr_match_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_match_add', text)

    def do_updtr_match_del(self, arg):
        """
        Remove a match condition from the Updater. The
        parameters are as follows:
        name=   The update policy name
        regex=  The regular expression string
        match=  The value with which to compare; if match=inst,
                the expression will match the set's instance name, if
                match=schema, the expression will match the set's
                schema name.
        """
        self.handle('updtr_match_del', arg)

    def complete_updtr_match_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_match_del', text)

    def do_updtr_prdcr_add(self, arg):
        """
        Add matching Producers to an Updater policy. The parameters are as
        follows:
        name=   The update policy name
        regex=  A regular expression matching zero or more producers
        """
        self.handle('updtr_prdcr_add', arg)

    def complete_updtr_prdcr_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_prdcr_add', text)

    def do_updtr_prdcr_del(self, arg):
        """
        Remove matching Producers from an Updater policy. The parameters are as
        follows:
        name=    The update policy name
        regex=   A regular expression matching zero or more producers
        """
        self.handle('updtr_prdcr_del', arg)

    def complete_updtr_prdcr_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_prdcr_del', text)

    def do_updtr_start(self, arg):
        """
        Start updaters. The parameters to the commands are as
        follows:
        name=     The update policy name
        [interval=] The update interval in micro-seconds. If this is not
                  specified, the previously configured value will be used.
        [offset=]   Offset for synchronization
        """
        self.handle('updtr_start', arg);

    def complete_updtr_start(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_start', text)

    def do_updtr_stop(self, arg):
        """
        Stop the Updater. The Updater must be stopped in order to
        change it's configuration.
        Paramaeters:
        name=   The update policy name
        """
        self.handle('updtr_stop', arg);

    def complete_updtr_stop(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_stop', text)

    def do_strgp_add(self, arg):
        """
        Create a Storage Policy and open/create the storage instance.
        Parameters:
        name=      The unique storage policy name.
        plugin=    The name of the storage backend.
        container= The storage backend container name.
        schema=    The schema name of the metric set to store.
        """
        self.handle('strgp_add', arg)

    def complete_strgp_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_add', text)

    def do_strgp_del(self, arg):
        """
        Remove a Storage Policy. All updaters must be stopped in order for
        a storage policy to be deleted.
        Parameters:
        name=   The storage policy name
        """
        self.handle('strgp_del', arg)

    def complete_strgp_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_del', text)

    def do_strgp_prdcr_add(self, arg):
        """
        Add a regular expression used to identify the producers this
        storage policy will apply to.
        Parameters:
        name=   The storage policy name
        regex=  A regular expression matching metric set producers
        """
        self.handle('strgp_prdcr_add', arg)

    def complete_strgp_prdcr_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_prdcr_add', text)

    def do_strgp_prdcr_del(self, arg):
        """
        Remove a regular expression from the producer match list.
        Parameters:
        name=   The storage policy name
        regex=  The regular expression to remove
        """
        self.handle('strgp_prdcr_del', arg)

    def complete_strgp_prdcr_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_prdcr_del', text)

    def do_strgp_metric_add(self, arg):
        """
        Add the name of a metric to store. If the metric list is NULL,
        all metrics in the metric set will be stored.
        Parameters:
        name=   The storage policy name
        metric= The metric name
        """
        self.handle('strgp_metric_add', arg)

    def complete_strgp_metric_add(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_metric_add', text)

    def do_strgp_metric_del(self, arg):
        """
        Remove a metric from the set of stored metrics.
        Parameters:
        name=   The storage policy name
        metric= The metric to remove
        """
        self.handle('strgp_metric_del', arg)

    def complete_strgp_set_del(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_metric_del', text)

    def do_strgp_start(self, arg):
        """
        Start storage policy.
        name=    The storage policy name
        """
        self.handle('strgp_start', arg);

    def complete_strgp_start(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_start', text)

    def do_strgp_stop(self, arg):
        """
        Stop storage policies. A storage policy must be stopped in order to
        change its configuration.
        Paramaeters:
        name=    The storage policy name
        """
        self.handle('strgp_stop', arg);

    def complete_strgp_stop(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_stop', text)

    def do_daemon_status(self, arg):
        """
        Report the daemon status
        Parameters: NONE
        """
        resp = self.handle('daemon_status', arg)
        if resp['errcode'] == 0:
            threads = json.loads(resp['msg'])
            print("Thread          Task Count")
            print("--------------- ----------")
            for thr in threads:
                print("{0:15} {1:>10}".format(thr['thread'], thr['task_count']))

    def complete_daemon_status(self, text, line, begidx, endidx):
        return self.__complete_attr_list('daemon_status', text)

    def do_prdcr_status(self, arg):
        """
        Get the statuses of all producers
        Parameters:
            NONE
        """
        resp = self.handle('prdcr_status', None)
        if resp['errcode'] != 0:
            print("Request returned error {0}".format(resp['errcode']))
            return

        producers =  json.loads(resp['msg'])
        print("Name             Host             Port         Transport    State")
        print("---------------- ---------------- ------------ ------------ ------------")
        for prdcr in producers:
            print("{0:16} {1:16} {2:12} {3:12} {4:12}".format(prdcr['name'],
                                                              prdcr['host'],
                                                              prdcr['port'],
                                                              prdcr['transport'],
                                                              prdcr['state']))
            for pset in prdcr['sets']:
                print("    {0:16} {1:16} {2}".format(pset['inst_name'],
                                                     pset['schema_name'],
                                                     pset['state']))

    def complete_prdcr_status(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_status', text)

    def do_prdcr_set_status(self, arg):
        """
        Report the statuses of producer sets that are matched the given conditions.
        Parameters:
        [producer=]        Producer name
        [instance=]        Instance name
        [schema=]          Schema name
        """
        resp = self.handle('prdcr_set_status', arg)
        if resp['errcode'] == 0:
            from datetime import datetime
            metric_sets = json.loads(resp['msg'])

            print("Name                 Schema Name      State      Origin           Producer         timestamp                duration (sec)")
            print("-------------------- ---------------- ---------- ---------------- ---------------- ------------------------- ---------------")
            for pset in metric_sets:
                ts = float(pset['timestamp.sec'])
                ts_sec = datetime.fromtimestamp(ts).strftime('%m-%d-%y %H:%M:%S')
                ts_str = "{0} [{1}]".format(ts_sec, pset['timestamp.usec'])
                dur = pset['duration.sec'] + "." + pset['duration.usec'].zfill(6)
                print("{0:20} {1:16} {2:10} {3:16} {4:16} {5:25} {6:12}".format(pset['inst_name'],
                                                                                pset['schema_name'],
                                                                                pset['state'],
                                                                                pset['origin'],
                                                                                pset['producer'],
                                                                                ts_str,
                                                                                dur))

    def complete_prdcr_set_status(self, text, line, begidx, endidx):
        return self.__complete_attr_list('prdcr_set_status', text)

    def do_updtr_status(self, arg):
        """
        Get the statuses of all Updaters.
        Parameters:
            NONE
        """
        resp = self.handle('updtr_status', None)
        if resp['errcode'] == 0:
            updaters = json.loads(resp['msg'])
            print("Name             Interval     Offset       Mode            State")
            print("---------------- ------------ ------------ --------------- ------------")
            for updtr in updaters:
                print("{0:16} {1:12} {2:12} {3:15} {4}".format(
                    updtr['name'], updtr['interval'], updtr['offset'],
                    updtr['mode'], updtr['state']))
                for prdcr in updtr['producers']:
                    print("    {0:16} {1:16} {2:12} {3:12} {4:12}".format(
                        prdcr['name'], prdcr['host'], prdcr['port'],
                        prdcr['transport'], prdcr['state']))

    def complete_updtr_status(self, text, line, begidx, endidx):
        return self.__complete_attr_list('updtr_status', text)

    def do_strgp_status(self, arg):
        resp = self.handle('strgp_status', None)
        if resp['errcode'] == 0:
            policies = json.loads(resp['msg'])
            print("Name             Container        Schema           Plugin           State")
            print("---------------- ---------------- ---------------- ---------------- ------------")
            for strgp in policies:
                print("{0:16} {1:16} {2:16} {3:16} {4}".format(
                    strgp['name'], strgp['container'], strgp['schema'],
                    strgp['plugin'], strgp['state']))
                print("    producers: ", end='')
                for prdcr in strgp['producers']:
                    print("{0} ".format(prdcr), end='')
                print('')
                print("    metrics: ", end='')
                for metric in strgp['metrics']:
                    print("{0} ".format(metric), end='')
                print('')

    def complete_strgp_status(self, text, line, begidx, endidx):
        return self.__complete_attr_list('strgp_status', text)

    def do_plugn_status(self, arg):
        resp = self.handle('plugn_status', None)
        if resp:
            plugins = json.loads(resp['msg'])
            print("Name         Type         Interval     Offset       Libpath")
            print("------------ ------------ ------------ ------------ ------------")
            for plugn in plugins:
                print("{0:12} {1:12} {2:12} {3:12} {4:12}".format(
                    plugn['name'], plugn['type'],
                    plugn['sample_interval_us'], plugn['sample_offset_us'],
                    plugn['libpath']))

    def do_status(self, arg):
        all__ = (len(arg) == 0)
        if "plugn" in arg or all__:
            self.do_plugn_status(arg)
        if "prdcr" in arg or all__:
            self.do_prdcr_status(arg)
        if "updtr" in arg or all__:
            self.do_updtr_status(arg)
        if "strgp" in arg or all__:
            self.do_strgp_status(arg)

    def do_term(self, arg):
        """
        Unload the plugin
        Parameters:
        name=   The plugin name
        """
        self.handle('term', arg)

    def complete_term(self, text, line, begidx, endidx):
        return self.__complete_attr_list('term', text)

    def do_config(self, arg):
        """
        Send a configuration command to the specified plugin.
        Parameters:
        name=   The plugin name
        ...     Plugin specific attr=value tuples
        """
        self.handle('config', arg)

    def complete_config(self, text, line, begidx, endidx):
        return self.__complete_attr_list('config', text)

    def do_start(self, arg):
        """
        Start a sampler plugin
        Parameters:
        name=     The plugin name
        interval= The sample interval in microseconds
        [offset=] Optional offset (shift) from the sample mark in microseconds.
                  Offset can be positive or negative with magnitude up to 1/2
                  the sample interval. If this offset is specified, including 0,
                  collection will be synchronous; if the offset is not specified,
                  collection will be asynchronous.
        """
        self.handle('start', arg)

    def complete_start(self, text, line, begidx, endidx):
        return self.__complete_attr_list('start', text)

    def do_stop(self, arg):
        """
        Stop a sampler plugin
        Parameters:
        name=     The plugin name
        """
        self.handle('stop', arg)

    def complete_stop(self, text, line, begidx, endidx):
        return self.__complete_attr_list('stop', text)

    def do_udata(self, arg):
        """
        Set the user data value for a metric in a metric set. This is typically used to
        convey the Component Id to the Aggregator.
        Parameters:
        instance=   The instance name
        metric= The metric name
        udata=  The desired user-data. This is a 64b unsigned integer.
        """
        self.handle('udata', arg)

    def complete_udata(self, text, line, begidx, endidx):
        return self.__complete_attr_list('udata', text)

    def do_udata_regex(self, arg):
        """
        Set the user data of multiple metrics using regular expression.
        The user data of the first matched metric is set to the base value.
        The base value is incremented by the given 'incr' value and then
        sets to the user data of the consecutive matched metric and so on.
        Parameters:
             instance=      The instance name
             regex=         A regular expression to match metric names to be set
             base=          The base value of user data (uint64)
             [incr=]        Increment value (int). The default is 0. If incr is 0,
                            the user data of all matched metrics are set
                            to the base value.
        """
        self.handle('udata_regex', arg)

    def complete_udata_regex(self, text, line, begidx, endidx):
        return self.__complete_attr_list('udata_regex', text)

    def do_loglevel(self, arg):
        """
        Changing the verbosity level of ldmsd
        Parameters:
        level=    Verbosity levels [DEBUG, INFO, ERROR, CRITICAL, QUIET]
        """
        self.handle('loglevel', arg)

    def complete_loglevel(self, text, line, begidx, endidx):
        return self.__complete_attr_list('loglevel', text)

    def do_logrotate(self, arg):
        """
        Close the current log file, rename it by appending
	the timestamp in seconds, and then open a new file
	with the name given at the ldmsd command-line.
        """
        self.handle('logrotate', arg)

    def complete_logrotate(self, text, line, begidx, endidx):
        return self.__complete_attr_list('logrotate', text)

    def do_version(self, arg):
        """
        Get the LDMS version the running LDMSD bases on.
        """
        resp = self.handle('version', arg)
        if 'errcode' in resp.keys() and resp['errcode'] == 0:
            print(resp['msg'])

    def do_include(self, arg):
        """
        Include a configuration file
        Parameters:
        path=    Path to the configuration file
        """
        self.handle('include', arg)

    def complete_include(self, text, line, begidx, endidx):
        return self.__complete_attr_list('include', text)

    def do_env(self, arg):
        """
        Set ldmsd environment
        """
        self.handle('env', arg)

    def do_EOF(self, arg):
        """
        Ctrl-D will exit the shell
        """
        return True

    def do_quit(self, arg):
        """
        Quit the LDMSD shell
        """
        self.ctrl.close()
        return True

    def do_oneshot(self, arg):
        """
        Make a sampler plugin to take a sample at a specific time
        Parameters:
        name=    Sampler plugin name
        time=    Timestamp since epoch. If 'now' is given, the sampler plugin will sample data right away.
        """
        self.handle('oneshot', arg)

    def complete_oneshot(self, text, line, begidx, endidx):
        return self.__complete_attr_list('oneshot', text)

    def do_greeting(self, arg):
        """
        Say hi to the ldmsd. If name="<string>" is given, ldmsd will echo the string back.
        If the parameter name is omitted, no responses will be returned.
        If a keyword 'test' is given, ldmsd will say 'Hi' back. E.g., greeting test.
        Parameter:
        [name=]   String that ldmsd will echo back.
        [offset=]  Number of characters in the response message.
        [level=]   Number of records in the response message.
        """
        resp = self.handle('greeting', arg)
        if resp['msg'] != "":
            print(resp['msg'])

    def complete_greeting(self, text, line, begidx, endidx):
        return self.__complete_attr_list('greeting', text)

    def parseline(self, line):
        """Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        Allows # comments to begin lines, and dispatches these to do_comment
        when present.
        """
        line = line.strip()
        if not line:
            return None, None, line
        elif line[0] == '?':
            line = 'help ' + line[1:]
        elif line[0] == '!':
            if hasattr(self, 'do_shell'):
                line = 'shell ' + line[1:]
            else:
                return None, None, line
        elif line[0] == '#':
            if hasattr(self, 'do_comment'):
                line = 'comment ' + line[1:]
            else:
                return None, None, line
        i, n = 0, len(line)
        while i < n and line[i] in self.identchars: i = i+1
        cmd, arg = line[:i], line[i:].strip()
        return cmd, arg, line

if __name__ == "__main__":
    is_debug = True
    try:
        parser = argparse.ArgumentParser(description="Configure an LDMS Daemon. " \
                                         "To connect to an ldmsd, either give " \
                                         "the socket path of the ldmsd or " \
                                         "give both hostname and inet control port. " \
                                         "If all are given, the sockname takes the priority.")
        parser.add_argument("--sockname",
                            help="Specify the UNIX socket used to communicate with LDMSD.")
        parser.add_argument('--host',
                            help = "Hostname of ldmsd to connect to")
        parser.add_argument('--port',
                            help = "Inet ctrl listener port of ldmsd")
        parser.add_argument('--xprt',
                            help = "LDMS Transport type: sock, ugni, rdma. Only for the inband channel",
                            choices = ['sock', 'ugni', 'rdma'],
                            default = 'sock')
        parser.add_argument('--auth_file',
                            help = "Path to the file containing the secretword. \
This is required when the ldmsd is using authentication regardless of transport types.")
        parser.add_argument('--source',
                            help = "Path to the config file")
        parser.add_argument('--script',
                            help = "Execute the script and send the output \
                            commands to the connected ldmsd")
        parser.add_argument('--inband', action = "store_true",
                            help = "Specify this option to connect to the data channel.")
        parser.add_argument('--debug', action = "store_true",
                            help = argparse.SUPPRESS)

        args = parser.parse_args()

        is_debug = args.debug

        if (args.sockname is None) and (args.host is None or args.port is None):
            print("Please give either --sockname or both of --host and --port.")
            sys.exit(1)

        if (args.sockname is not None) and (args.host is not None or args.port is not None):
            print("The Unix Domain socket path is ignored.")
            args.sockname = None

        cmdParser = LdmsdCmdParser(sockname = args.sockname,
                                   host = args.host,
                                   port = args.port,
                                   xprt = args.xprt,
                                   inband = args.inband,
                                   secretPath = args.auth_file)

        if args.source is not None or args.script is not None:
            if args.source is not None:
                cmdParser.do_source(args.source)
            if args.script is not None:
                cmdParser.do_script(args.script)
            cmdParser.do_quit(None)
        else:
            if sys.stdin.isatty() is False:
                cmdParser.read_none_tty(sys.stdin)
                cmdParser.do_quit(None)
            else:
                cmdParser.cmdloop("Welcome to the LDMSD control processor")
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception as e:
        if is_debug:
            print(is_debug)
            traceback.print_exc()
            sys.exit(2)
        else:
            print(e)
