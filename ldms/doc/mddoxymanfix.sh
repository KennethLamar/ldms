#!/bin/bash
#
# NAME
#
#     mddoxymanfix - fix doxygen man output from markdown input
#
# SYNOPSIS
#
#     mddoxymanfix.sh DOXY_GENERATED_MAN_FILE > OUTPUT
#
# DESCRIPTION
#
#     This script addresses issues found in the doxygen man output generated
#     from markdown input as follows:
#
#     - funny title: doxygen generate manpage title using path to the markdown
#       file relative to the top of the project. For example,
#       "ldms/doc/mdtest.md" becomes "md_ldms_doc_mdtest". The script uses the
#       document base name (e.g. "mdtest") as a default instead. The caller can
#       set "$TITLE" environment variable to override it.
#
#     - section: doxygen accepts only out man section number (default 3).
#       Hence, all generated man pages go into the same section. This script
#       allows an override in man section number using "$SECTION" env var.
#
#     - funny NAME section: doxygen automatically generates NAME section and
#       uses TITLE+BASENAME as a program name, following by "-" and NO short
#       description following it. The funny NAME section is removed and rely on
#       the input file to have its own NAME section instead.
#
#     - in-line code: doxygen manpage uses '\fC' which has no effect when
#       displaying the manpage in terminal. This script replaces `\fC` with
#       `\f[CB]` to make the inline code stand out more (bolden it).
#
#     - style reset: doxygen manpage uses `\fP` to reset the style back to
#       previous style. The problem is, when the input file requests BOLD and
#       ITALIC style, doxygen requests `\fB\fI` instead of `\f[BI]`, which makes
#       the following text becoming ITALIC only and not BOLD. In addition, the
#       `\fP` will just switch back to BOLD instead of clearing the style. This
#       script replaces `\fP` with `\fR` to request a normal (Roman) style
#       instead.
#
#     - bold and italic: as mentioned above, the ITALIC and BOLD are managed
#       separately by doxygen. Hence, BOLD and ITALIC become `\fB\fI` requests
#       and the style applied to the text will be the last request, which is
#       `\fI` (italic). This script looks for `\fI\fB` and `\fB\fI` and replace
#       them with `\f[BI]` for proper BOLD-ITALIC roff request.
#
#     - properly escapes literal '\n'.
#
#     - properly recesses code blocks (examples).
#
#     - eliminates ' ' after `<br>` that was automatically generated by doxygen.
#
#     - escape leading "'" for it will be mistaken as roff request. doxygen
#       always use "." for making a roff request. So, we are pretty sure that
#       the un-escaped leading "'" is not a roff request, and is a doxygen bug
#       for not escaping it.
#
#     These environment variables controls fixup output:
#     - TITLE     e.g. "LDMSD", default: inferred from NAME section, or fall
#                 back to using doxygen-generated title.
#     - SECTION   e.g. "1", default: doxygen-generated text (3)
#     - DATE      e.g. "1 Jan 2019", default: doxygen-generated date
#     - VER       e.g. "1.0", default: doxygen-generated version
#     - HEADER    e.g. "System Tool", default: doxygen-generated text

F=$1

err() {
	# print error message and exit
	echo $*
	exit -1
}

val() {
	# print var = value
	echo $1: ${!1}
}

[[ -e "$F" ]] || err "File not found: $F"

# Get doxygen generated titles and stuff
X=$(grep '\.TH' $F | sed 's/\\".*//')
eval X=(${X})

# Getting the NAME from the `NAME` section generated by doxygen
NAME=$(sed -n -e "/^\\.SH NAME\\>/{ n; s/${X[1]}//; s/\\s\\+\$//; p; }" < $F )

TITLE=${TITLE:-${NAME^^*}} # Try uppercase NAME section first
TITLE=${TITLE:-${X[1]}} # The fallback to doxygen-generated
SECTION=${SECTION:-${X[2]}} # The fallback to doxygen-generated
DATE=${DATE:-${X[3]}}
VER=${VER:-${X[4]}}
HEADER=${HEADER:-${X[5]}}

#val TITLE
#val SECTION
#val DATE
#val VER
#val HEADER

echo .TH \"$TITLE\" \"$SECTION\" \"$DATE\" \"$VER\" \"$HEADER\"

grep -v '^\.TH' $F |
sed -e "/./{H;\$!d} ; x ; \
s/\\n\\.SH NAME\\n[^\\n]*\\n \\\\- \\([^\\n]*\\)/\\n/; \
s/\\\\fC/\\\\f[CB]/g; \
s/\\\\fP/\\\\fR/g; \
s/\\(\\\\fR\\)\\+/\\\\fR/g; \
s/\\n\\.nf\\>/\\n.RS 4\\n.nf/g; \
s/\\n\\.fi\\>/\\n.fi\\n.RE/g; \
s/\\\\\\n/\\\\\\\\\\n/g; \
s/\\.br\\n /\\.br\\n/g; \
s/\\\\fI\\\\fB/\\\\f[BI]/g; \
s/\\\\fB\\\\fI/\\\\f[BI]/g; \
s/\\.PP\\n \\+/.PP\\n/g; \
s/\\n'/\\n\\\\\\&'/g; \
"
