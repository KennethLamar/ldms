About, build and run instructions
==================================

About
==============
SOS is an acronym for Scalable Object Store
MDS is an acronym for Metric Data Set

The SOS implements an indexed persistent object store that contains
instances of an SOS Object Class. An SOS Object Class is an enumerated
set of SOS Object Attributes. We say enumerated here because they are
accessed by their ordinal index in the SOS Object.

The MDS is an instance of an SOS that contains instances of Metric
Data objects. A Metric Data object is defined using SOS Object
definition macros as follows:

SOS_OBJ_BEGIN(metric_data_class, "OvisMetric")
	SOS_OBJ_ATTR("tv_sec", SOS_TYPE_INT32, 1),
	SOS_OBJ_ATTR("tv_usec", SOS_TYPE_INT32, 0),
	SOS_OBJ_ATTR("comp_id", SOS_TYPE_INT32, 1),
	SOS_OBJ_ATTR("value", SOS_TYPE_INT64, 0)
SOS_OBJ_END(4);

This logically defines an object class that contains four attributes
named: "tv_sec", "tv_usec", "comp_id", and "value". They are accessed
using the sos_set_attr, and sos_get_attr accessor functions. These
functions take an object attribute index that specifies which
attribute in the object is being accessed and an untyped value ptr. It
is contingent upon the caller to ensure that the types match or bad
data will be stored to the object attribute.

The commands mds_load and sos_query are provided to load an MDS and
query it's contents. While the mds_load command is specific to the MDS
Object Store, the sos_query command is generic. The reason for this is
that each SOS contains a schema that defines the object class it
contains, so the query can be generic. In order to create a new object
store, or add objects to it, one needs to know the type of objects it
contains.


Building
==========
SOS:
* Copy sos.tgz to Source directory
** cp sos.tgz /projects/ldms/Source/
* Untar sos
** cd /projects/ldms/Source/
** tar xvfz sos.tgz
* Build sos
** cd sos
** ./configure --prefix=/projects/ldms/Build/sos.usr
** make && make install

Running
==========
MDS-LOAD:
mds-load is a utility to add items to an sos store.
Enter data as given below. Columns are: 
      component type, metric name, component id, value, usec, sec
Ctrl-C to exit.

$ /projects/ldms/Build/sos.usr/sbin/mds_load /projects/ldms/Build/teststore
node,active,3,1000,0,0
node,active,10,300,0,1
node,active,5,500,1,0
node,active,3,1000,1,1
^C



MDS-QUERY:
mds-query is a utility to query dta in an sos store. Data can accessed in various
ways, e.g., at a timestamp, ordered by time, etc

$ /projects/ldms/Build/sos.usr/sbin/mds_query --help
usage: sos.usr/sbin/mds_query [OPTION]... {COMP_TYPE:METRIC}...
        -p <path>      - Path to files
        -c <comp_id>   - Specify component
        -t <time>      - Specify time
        -T             - Show results by Time
        -C             - Show results by Component
        -q             - Quiet output


$ /projects/ldms/Build/sos.usr/sbin/mds_query -p ./teststore node:active
COMP_TYPE: node METRIC_NAME: active

Timestamp                Component    Value           
------------------------ ------------ ----------------
12/31/69 16:00:00.0                 3             1000 0x7f53289a8fc0
12/31/69 16:00:00.1                 5              500 0x7f53289a8f40
12/31/69 16:00:01.0                10              300 0x7f53289a8f80
12/31/69 16:00:01.1                 3             1000 0x7f53289a8f00
------------------------ ------------ ----------------
4 records

$ /projects/ldms/Build/sos.usr/sbin/mds_query -c 3 -p ./teststore node:active
COMP_TYPE: node METRIC_NAME: active

Timestamp                Component    Value           
------------------------ ------------ ----------------
12/31/69 16:00:00.0                 3             1000 0x7f3f8ac33fc0
12/31/69 16:00:01.1                 3             1000 0x7f3f8ac33f00
------------------------ ------------ ----------------
2 records
